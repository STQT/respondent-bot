from django.core.management.base import BaseCommand
from django.utils import timezone
from apps.polls.models import BroadcastPost
from apps.users.models import TGUser


class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏'

    def add_arguments(self, parser):
        parser.add_argument(
            '--title',
            type=str,
            default='–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç',
            help='–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞',
        )
        parser.add_argument(
            '--content',
            type=str,
            default='–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–∫–∏.',
            help='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Å—Ç–∞',
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Å—Ç',
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üì¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏')
        )
        self.stdout.write('=' * 50)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = TGUser.objects.filter(is_active=True)
        total_users = all_users.count()

        self.stdout.write(f'üë• –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}')

        if total_users == 0:
            self.stdout.write(
                self.style.WARNING('‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
            )
            return

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 100
        user_ids = list(all_users.values_list('id', flat=True))
        chunk_size = 100
        user_chunks = [user_ids[i:i + chunk_size] for i in range(0, len(user_ids), chunk_size)]

        self.stdout.write(f'üì¶ –°–æ–∑–¥–∞–Ω–æ –≥—Ä—É–ø–ø: {len(user_chunks)}')
        for i, chunk in enumerate(user_chunks):
            self.stdout.write(f'   –ì—Ä—É–ø–ø–∞ {i}: {len(chunk)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.stdout.write('\nüë§ –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:')
        for user in all_users[:5]:
            self.stdout.write(f'   - {user.fullname} (TG: {user.id})')

        if not options['dry_run']:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
            broadcast = BroadcastPost.objects.create(
                title=options['title'],
                content=options['content'],
                status='draft'
            )

            self.stdout.write(f'\n‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ—Å—Ç: {broadcast.id}')
            self.stdout.write(f'   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {broadcast.title}')
            self.stdout.write(f'   –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {broadcast.content[:50]}...')
            self.stdout.write(
                self.style.SUCCESS('üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É Django')
            )

            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
            broadcast.delete()
            self.stdout.write('üßπ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —É–¥–∞–ª–µ–Ω')

        self.stdout.write(
            self.style.SUCCESS('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
        )
