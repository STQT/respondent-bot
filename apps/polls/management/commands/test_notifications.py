from django.core.management.base import BaseCommand
from django.utils import timezone
from apps.polls.models import NotificationCampaign, Poll, Respondent
from apps.users.models import TGUser


class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'

    def add_arguments(self, parser):
        parser.add_argument(
            '--poll-id',
            type=int,
            help='ID –æ–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π)',
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é',
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
        )
        self.stdout.write('=' * 50)

        # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ä–æ—Å
        if options['poll_id']:
            try:
                poll = Poll.objects.get(id=options['poll_id'])
            except Poll.DoesNotExist:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå –û–ø—Ä–æ—Å —Å ID {options["poll_id"]} –Ω–µ –Ω–∞–π–¥–µ–Ω')
                )
                return
        else:
            poll = Poll.objects.first()
            if not poll:
                self.stdout.write(
                    self.style.ERROR('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤')
                )
                return

        self.stdout.write(f'üìä –û–ø—Ä–æ—Å: {poll.name}')
        self.stdout.write(f'üîë UUID: {poll.uuid}')

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å
        users_who_completed = Respondent.objects.filter(
            poll=poll,
            finished_at__isnull=False
        ).values_list('tg_user_id', flat=True).distinct()

        self.stdout.write(f'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–µ –æ–ø—Ä–æ—Å: {len(users_who_completed)}')

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = TGUser.objects.filter(is_active=True)
        users_to_notify = all_users.exclude(id__in=users_who_completed)

        self.stdout.write(f'üì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {users_to_notify.count()}')

        if users_to_notify.count() == 0:
            self.stdout.write(
                self.style.WARNING('‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
            )
            return

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 100
        user_ids = list(users_to_notify.values_list('id', flat=True))
        chunk_size = 100
        user_chunks = [user_ids[i:i + chunk_size] for i in range(0, len(user_ids), chunk_size)]

        self.stdout.write(f'üì¶ –°–æ–∑–¥–∞–Ω–æ –≥—Ä—É–ø–ø: {len(user_chunks)}')
        for i, chunk in enumerate(user_chunks):
            self.stdout.write(f'   –ì—Ä—É–ø–ø–∞ {i}: {len(chunk)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.stdout.write('\nüë§ –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:')
        for user in users_to_notify[:5]:
            self.stdout.write(f'   - {user.fullname} (ID: {user.id}, TG: {user.telegram_id})')

        if not options['dry_run']:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é
            campaign = NotificationCampaign.objects.create(
                topic=poll,
                total_users=users_to_notify.count(),
                status='pending'
            )

            self.stdout.write(f'\n‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞–º–ø–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {campaign.id}')
            self.stdout.write(
                self.style.SUCCESS('üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É Django')
            )

            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é
            campaign.delete()
            self.stdout.write('üßπ –¢–µ—Å—Ç–æ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞')

        self.stdout.write(
            self.style.SUCCESS('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
        )
