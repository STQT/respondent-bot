from django.contrib import admin
from django.http import HttpResponse
from django.template.response import TemplateResponse
from django.urls import path
from import_export.admin import ExportMixin
from tablib import Dataset
from markdownx.admin import MarkdownxModelAdmin
from django.utils import timezone


from apps.polls.filters import PollFilterForm
from apps.polls.models import Poll, Question, Choice, Respondent, Answer, ExportFile, ExportChunk, NotificationCampaign, BroadcastPost
from apps.polls.resources import RespondentExportResource
from apps.polls.tasks import export_respondents_task


class ChoiceInline(admin.TabularInline):
    model = Choice
    extra = 1

    def get_max_num(self, request, obj=None, **kwargs):
        if obj and obj.type == Question.QuestionTypeChoices.MIXED:
            return 11
        return 12


class QuestionInline(admin.StackedInline):
    model = Question
    extra = 1
    show_change_link = True


@admin.register(Poll)
class PollAdmin(admin.ModelAdmin):
    list_display = ('name', 'uuid', 'deadline', 'is_active_status')
    inlines = [QuestionInline]

    def is_active_status(self, obj):
        return obj.is_active()

    is_active_status.boolean = True
    is_active_status.short_description = "–ê–∫—Ç–∏–≤–µ–Ω?"


@admin.register(Question)
class QuestionAdmin(admin.ModelAdmin):
    list_display = ('text', 'type', 'poll', 'max_choices', 'order')
    list_editable = ('order', 'max_choices')
    inlines = [ChoiceInline]
    list_filter = ('poll', 'type')


class ExportChunkInline(admin.TabularInline):
    model = ExportChunk
    extra = 0
    readonly_fields = ('chunk_number', 'filename', 'status', 'rows_count', 'created_at', 'completed_at', 'file')
    fields = ('chunk_number', 'filename', 'status', 'rows_count', 'file', 'created_at', 'completed_at')
    
    def has_add_permission(self, request, obj=None):
        return False
    
    def has_change_permission(self, request, obj=None):
        return False


@admin.register(ExportFile)
class ExportFileAdmin(admin.ModelAdmin):
    list_display = ('filename', 'status', 'is_chunked', 'get_progress_display', 'created_at', 'completed_at', 'created_by', 'poll')
    list_filter = ('status', 'is_chunked', 'created_at', 'poll')
    readonly_fields = ('created_at', 'completed_at', 'file', 'filename', 'is_chunked', 'total_chunks', 'completed_chunks', 'chunk_size', 'get_progress_display')
    search_fields = ('filename', 'error_message')
    inlines = [ExportChunkInline]
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('filename', 'status', 'poll', 'include_unfinished', 'created_by')
        }),
        ('Chunked —ç–∫—Å–ø–æ—Ä—Ç', {
            'fields': ('is_chunked', 'total_chunks', 'completed_chunks', 'chunk_size', 'get_progress_display'),
            'classes': ('collapse',)
        }),
        ('–§–∞–π–ª—ã –∏ –≤—Ä–µ–º—è', {
            'fields': ('file', 'created_at', 'completed_at', 'error_message'),
            'classes': ('collapse',)
        }),
    )
    
    def get_progress_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å chunked —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        if not obj.is_chunked:
            return "100%" if obj.status == 'completed' else "0%"
        return f"{obj.get_progress_percentage()}%"
    get_progress_display.short_description = '–ü—Ä–æ–≥—Ä–µ—Å—Å'
    
    def has_add_permission(self, request):
        return False  # –ó–∞–ø—Ä–µ—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É
    
    def has_change_permission(self, request, obj=None):
        return False  # –ó–∞–ø—Ä–µ—â–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É


@admin.register(ExportChunk)
class ExportChunkAdmin(admin.ModelAdmin):
    list_display = ('export_file', 'chunk_number', 'filename', 'status', 'rows_count', 'created_at', 'completed_at')
    list_filter = ('status', 'export_file', 'created_at')
    readonly_fields = ('export_file', 'chunk_number', 'filename', 'status', 'rows_count', 'file', 'created_at', 'completed_at', 'error_message')
    search_fields = ('filename', 'export_file__filename')
    
    def has_add_permission(self, request):
        return False
    
    def has_change_permission(self, request, obj=None):
        return False


@admin.register(Respondent)
class RespondentAdmin(admin.ModelAdmin):
    list_display = ('tg_user', 'poll', 'started_at', 'finished_at')
    list_filter = ('poll', 'finished_at')
    change_list_template = "polls/respondents_export_filter.html"  # —à–∞–±–ª–æ–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏ (—Å–º. –Ω–∏–∂–µ)

    def get_urls(self):
        urls = super().get_urls()
        return [
            path('export-custom/', self.admin_site.admin_view(self.export_custom_view), name='respondent_export_custom'),
            path('export-async/', self.admin_site.admin_view(self.export_async_view), name='respondent_export_async'),
            path('export-chunked/', self.admin_site.admin_view(self.export_chunked_view), name='respondent_export_chunked')
        ] + urls

    def export_custom_view(self, request):
        if request.method == "POST":
            form = PollFilterForm(request.POST)
            if form.is_valid():
                poll = form.cleaned_data["poll"]
                include_unfinished = form.cleaned_data["include_unfinished"]
                print(f"üìù Export request received for poll: {poll.id}, include_unfinished={include_unfinished}")

                resource = RespondentExportResource(poll=poll, include_unfinished=include_unfinished)
                queryset = resource.get_export_queryset(request)
                export_fields = resource.get_export_fields()

                dataset = Dataset(headers=[f.column_name for f in export_fields])
                for respondent in queryset:
                    row = resource.export_resource(respondent)
                    dataset.append([row.get(f.attribute or f.column_name, "") for f in export_fields])

                print(f"‚úÖ Exported {len(dataset)} rows with {len(export_fields)} fields")

                try:
                    response = HttpResponse(dataset.xlsx,
                                            content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
                    response["Content-Disposition"] = f'attachment; filename=respondents_poll_{poll.id}.xlsx'
                    return response
                except Exception as e:
                    print("‚ùå XLSX export error:", e)
                    raise
        else:
            form = PollFilterForm()

        context = {
            "opts": self.model._meta,
            "form": form,
            "title": "–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏",
        }
        return TemplateResponse(request, "polls/respondents_export_form.html", context)

    def export_async_view(self, request):
        if request.method == "POST":
            form = PollFilterForm(request.POST)
            if form.is_valid():
                poll = form.cleaned_data["poll"]
                include_unfinished = form.cleaned_data["include_unfinished"]
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∞
                export_file = ExportFile.objects.create(
                    poll=poll,
                    include_unfinished=include_unfinished,
                    created_by=request.user,
                    filename=f"respondents_poll_{poll.id if poll else 'all'}.xlsx"
                )
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º Celery task
                export_respondents_task.delay(export_file.id)
                
                from django.contrib import messages
                messages.success(
                    request,
                    f"–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø—É—â–µ–Ω! –§–∞–π–ª –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. "
                    f"ID —ç–∫—Å–ø–æ—Ä—Ç–∞: {export_file.id}"
                )
                
                from django.shortcuts import redirect
                return redirect('admin:polls_respondent_changelist')
        else:
            form = PollFilterForm()

        context = {
            "opts": self.model._meta,
            "form": form,
            "title": "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤",
        }
        return TemplateResponse(request, "polls/respondents_export_form.html", context)

    def export_chunked_view(self, request):
        if request.method == "POST":
            form = PollFilterForm(request.POST)
            if form.is_valid():
                poll = form.cleaned_data["poll"]
                include_unfinished = form.cleaned_data["include_unfinished"]
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã chunked —ç–∫—Å–ø–æ—Ä—Ç–∞
                chunk_size = int(request.POST.get('chunk_size', 1000))
                max_chunks = int(request.POST.get('max_chunks', 10))
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∞
                export_file = ExportFile.objects.create(
                    poll=poll,
                    include_unfinished=include_unfinished,
                    created_by=request.user,
                    filename=f"respondents_poll_{poll.id if poll else 'all'}_chunked.xlsx"
                )
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º chunked –∑–∞–¥–∞—á—É
                from .tasks import export_respondents_chunked_task
                export_respondents_chunked_task.delay(export_file.id, chunk_size, max_chunks)
                
                from django.contrib import messages
                messages.success(
                    request,
                    f"Chunked —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–ø—É—â–µ–Ω! –§–∞–π–ª—ã –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. "
                    f"–†–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏: {chunk_size} –∑–∞–ø–∏—Å–µ–π, –º–∞–∫—Å–∏–º—É–º —á–∞—Å—Ç–µ–π: {max_chunks}. "
                    f"ID —ç–∫—Å–ø–æ—Ä—Ç–∞: {export_file.id}"
                )
                
                from django.shortcuts import redirect
                return redirect('admin:polls_respondent_changelist')
        else:
            form = PollFilterForm()

        context = {
            "opts": self.model._meta,
            "form": form,
            "title": "Chunked —ç–∫—Å–ø–æ—Ä—Ç —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤",
        }
        return TemplateResponse(request, "polls/respondents_export_chunked_form.html", context)


@admin.register(Answer)
class AnswerAdmin(admin.ModelAdmin):
    list_display = ('respondent', 'question')
    list_filter = ('question__poll',)


@admin.register(NotificationCampaign)
class NotificationCampaignAdmin(admin.ModelAdmin):
    list_display = ['topic', 'total_users', 'sent_users', 'get_blocked_users_count', 'status', 'created_at', 'started_at', 'completed_at']
    list_filter = ['status', 'topic', 'created_at']
    readonly_fields = ['total_users', 'sent_users', 'get_blocked_users_count', 'created_at', 'started_at', 'completed_at', 'get_progress_percentage']
    search_fields = ['topic__name']
    actions = ['start_notification_campaign']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('topic', 'status', 'error_message')
        }),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': ('total_users', 'sent_users', 'get_blocked_users_count', 'get_progress_percentage'),
            'classes': ('collapse',)
        }),
        ('–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏', {
            'fields': ('created_at', 'started_at', 'completed_at'),
            'classes': ('collapse',)
        }),
    )
    
    def get_progress_percentage(self, obj):
        """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        return f"{obj.get_progress_percentage()}%"
    get_progress_percentage.short_description = '–ü—Ä–æ–≥—Ä–µ—Å—Å'
    
    def get_blocked_users_count(self, obj):
        """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ç–µ–º—ã"""
        from apps.users.models import TGUser
        from .models import Respondent
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å –ø–æ –¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ
        users_who_completed = Respondent.objects.filter(
            poll=obj.topic,
            finished_at__isnull=False
        ).values_list('tg_user_id', flat=True).distinct()
        
        # –°—á–∏—Ç–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å
        blocked_users = TGUser.objects.filter(
            is_active=True,
            blocked_bot=True
        ).exclude(id__in=users_who_completed).count()
        
        return blocked_users
    get_blocked_users_count.short_description = '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö'
    
    def save_model(self, request, obj, form, change):
        """Custom save method to calculate total_users if not set"""
        if not change:  # New object - always calculate total_users
            # Calculate total_users based on users who haven't completed the poll
            from apps.users.models import TGUser
            from .models import Respondent
            
            users_who_completed = Respondent.objects.filter(
                poll=obj.topic,
                finished_at__isnull=False
            ).values_list('tg_user_id', flat=True).distinct()
            
            # –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            all_users = TGUser.objects.filter(is_active=True, blocked_bot=False)
            users_to_notify = all_users.exclude(id__in=users_who_completed)
            
            obj.total_users = users_to_notify.count()
        
        super().save_model(request, obj, form, change)
    
    def start_notification_campaign(self, request, queryset):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        from .tasks import start_notification_campaign_task
        
        for campaign in queryset:
            if campaign.status == 'pending':
                start_notification_campaign_task.delay(campaign.id)
                campaign.status = 'processing'
                campaign.started_at = timezone.now()
                campaign.save()
        
        self.message_user(request, f"–ó–∞–ø—É—â–µ–Ω–æ {queryset.count()} –∫–∞–º–ø–∞–Ω–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    start_notification_campaign.short_description = "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"


@admin.register(BroadcastPost)
class BroadcastPostAdmin(admin.ModelAdmin):
    list_display = [
        'title', 'status', 'total_users', 'sent_users', 'failed_users', 
        'get_progress_percentage', 'get_success_rate', 'created_at', 'scheduled_at'
    ]
    list_filter = ['status', 'created_at', 'scheduled_at']
    search_fields = ['title', 'content']
    readonly_fields = [
        'total_users', 'sent_users', 'failed_users', 'started_at', 
        'completed_at', 'get_progress_percentage', 'get_success_rate'
    ]
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('title', 'content', 'image')
        }),
        ('–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', {
            'fields': ('scheduled_at', 'status')
        }),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': (
                'total_users', 'sent_users', 'failed_users', 
                'get_progress_percentage', 'get_success_rate'
            ),
            'classes': ('collapse',)
        }),
        ('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', {
            'fields': ('started_at', 'completed_at', 'error_message'),
            'classes': ('collapse',)
        }),
    )
    actions = ['start_broadcast', 'duplicate_broadcast', 'send_test_broadcast', 'send_test_broadcast_admin']
    
    def get_progress_percentage(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        return f"{obj.get_progress_percentage()}%"
    get_progress_percentage.short_description = "–ü—Ä–æ–≥—Ä–µ—Å—Å"
    
    def get_success_rate(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫"""
        return f"{obj.get_success_rate()}%"
    get_success_rate.short_description = "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å"
    
    def start_broadcast(self, request, queryset):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
        from .tasks import start_broadcast_task
        
        for broadcast in queryset:
            if broadcast.status in ['draft', 'scheduled']:
                start_broadcast_task.delay(broadcast.id)
                broadcast.status = 'sending'
                broadcast.started_at = timezone.now()
                broadcast.save()
        
        self.message_user(request, f"–ó–∞–ø—É—â–µ–Ω–æ {queryset.count()} —Ä–∞—Å—Å—ã–ª–æ–∫")
    start_broadcast.short_description = "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"
    
    def duplicate_broadcast(self, request, queryset):
        """–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
        for broadcast in queryset:
            broadcast.pk = None
            broadcast.title = f"{broadcast.title} (–∫–æ–ø–∏—è)"
            broadcast.status = 'draft'
            broadcast.total_users = 0
            broadcast.sent_users = 0
            broadcast.failed_users = 0
            broadcast.started_at = None
            broadcast.completed_at = None
            broadcast.error_message = ''
            broadcast.save()
        
        self.message_user(request, f"–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–æ {queryset.count()} —Ä–∞—Å—Å—ã–ª–æ–∫")
    duplicate_broadcast.short_description = "–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"
    
    def send_test_broadcast(self, request, queryset):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç"""
        from django.contrib import messages
        from django.shortcuts import render
        from django.http import HttpResponseRedirect
        from .tasks import send_test_broadcast_task
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ—Å—Ç
        if queryset.count() != 1:
            messages.error(request, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏')
            return HttpResponseRedirect(request.get_full_path())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä action –≤ POST –∑–∞–ø—Ä–æ—Å–µ
        if request.method == 'POST' and 'action' in request.POST:
            # –≠—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç Django Admin –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
            context = {
                'queryset': queryset,
                'action_name': 'send_test_broadcast',
                'title': '–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞'
            }
            return render(request, 'admin/test_broadcast_form.html', context)
        
        if request.method == 'POST' and 'test_user_id' in request.POST:
            # –≠—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
            test_user_id = request.POST.get('test_user_id')
            if not test_user_id:
                messages.error(request, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
                context = {
                    'queryset': queryset,
                    'action_name': 'send_test_broadcast',
                    'title': '–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞'
                }
                return render(request, 'admin/test_broadcast_form.html', context)
            
            try:
                test_user_id = int(test_user_id)
            except ValueError:
                messages.error(request, 'Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º')
                context = {
                    'queryset': queryset,
                    'action_name': 'send_test_broadcast',
                    'title': '–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞'
                }
                return render(request, 'admin/test_broadcast_form.html', context)
            
            broadcast = queryset.first()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            task = send_test_broadcast_task.delay(broadcast.id, test_user_id)
            
            messages.success(request, f'–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}. –ó–∞–¥–∞—á–∞ ID: {task.id}')
            return HttpResponseRedirect(request.get_full_path())
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ Telegram ID
        context = {
            'queryset': queryset,
            'action_name': 'send_test_broadcast',
            'title': '–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞'
        }
        return render(request, 'admin/test_broadcast_form.html', context)
    
    send_test_broadcast.short_description = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç"
    
    def send_test_broadcast_admin(self, request, queryset):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        from django.contrib import messages
        from django.conf import settings
        from .tasks import send_test_broadcast_task
        
        # ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        admin_test_id = getattr(settings, 'TEST_TELEGRAM_ID', 123456789)
        
        if queryset.count() != 1:
            messages.error(request, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏')
            return
        
        broadcast = queryset.first()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        task = send_test_broadcast_task.delay(broadcast.id, admin_test_id)
        
        messages.success(request, f'–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (ID: {admin_test_id}). –ó–∞–¥–∞—á–∞ ID: {task.id}')
    
    send_test_broadcast_admin.short_description = "–¢–µ—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
