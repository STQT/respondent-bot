import os
from celery import shared_task
from celery.exceptions import SoftTimeLimitExceeded
from django.utils import timezone
from django.core.files.base import ContentFile
from tablib import Dataset

from .models import ExportFile, ExportChunk, Respondent
from .resources import RespondentExportResource


from django.core.files.base import File
from tempfile import NamedTemporaryFile
from openpyxl import Workbook


@shared_task(bind=True, soft_time_limit=1800, time_limit=2100)
def export_respondents_task(self, export_file_id):
    try:
        export_file = ExportFile.objects.get(id=export_file_id)
        export_file.status = "processing"
        export_file.save()

        # —Ä–µ—Å—É—Ä—Å + queryset
        resource = RespondentExportResource(
            poll=export_file.poll,
            include_unfinished=export_file.include_unfinished,
        )
        queryset = resource.get_export_queryset(None)
        export_fields = resource.get_export_fields()

        # —Å–æ–∑–¥–∞–µ–º Excel-—Ñ–∞–π–ª
        wb = Workbook(write_only=True)  # write_only ‚Üí –Ω–µ –¥–µ—Ä–∂–∏—Ç –≤—Å—ë –≤ –ø–∞–º—è—Ç–∏
        ws = wb.create_sheet(title="Respondents")

        # –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = [f.column_name for f in export_fields]
        ws.append(headers)

        # –¥–∞–Ω–Ω—ã–µ (–∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —á–∞–Ω–∫–∞–º)
        rows_exported = 0
        for respondent in queryset.iterator(chunk_size=500):
            row = resource.export_resource(respondent)
            ws.append([row.get(f.attribute or f.column_name, "") for f in export_fields])
            rows_exported += 1

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        timestamp = timezone.now().strftime("%Y%m%d_%H%M%S")
        poll_id = export_file.poll.id if export_file.poll else "all"
        filename = f"respondents_poll_{poll_id}_{timestamp}.xlsx"

        with NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
            wb.save(tmp.name)
            tmp.seek(0)
            export_file.file.save(filename, File(tmp), save=False)

        export_file.filename = filename
        export_file.status = "completed"
        export_file.completed_at = timezone.now()
        export_file.save()

        return {
            "status": "success",
            "export_file_id": export_file_id,
            "rows_exported": rows_exported,
            "filename": filename,
        }

    except ExportFile.DoesNotExist:
        return {"status": "error", "message": f"ExportFile with id {export_file_id} not found"}

    except SoftTimeLimitExceeded:
        try:
            export_file = ExportFile.objects.get(id=export_file_id)
            export_file.status = "failed"
            export_file.error_message = "Task timed out - export took too long"
            export_file.save()
        except ExportFile.DoesNotExist:
            pass
        return {"status": "error", "message": "Task timed out - export took too long"}

    except Exception as e:
        try:
            export_file = ExportFile.objects.get(id=export_file_id)
            export_file.status = "failed"
            export_file.error_message = str(e)
            export_file.save()
        except ExportFile.DoesNotExist:
            pass
        return {"status": "error", "message": str(e)}


@shared_task(bind=True, soft_time_limit=1800, time_limit=2100)  # 30 min soft, 35 min hard
def start_notification_campaign_task(self, campaign_id):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    –†–∞–∑–±–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 100 –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –¥–æ—á–µ—Ä–Ω–∏–µ –∑–∞–¥–∞—á–∏.
    """
    try:
        from .models import NotificationCampaign, Poll
        from apps.users.models import TGUser
        
        campaign = NotificationCampaign.objects.get(id=campaign_id)
        campaign.status = 'processing'
        campaign.save()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å –ø–æ –¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ
        topic = campaign.topic
        users_who_completed = Respondent.objects.filter(
            poll=topic,
            finished_at__isnull=False
        ).values_list('tg_user_id', flat=True).distinct()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å –ø–æ –¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ
        # –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = TGUser.objects.filter(is_active=True, blocked_bot=False)
        users_to_notify = all_users.exclude(id__in=users_who_completed)
        
        campaign.total_users = users_to_notify.count()
        campaign.save()
        
        if campaign.total_users == 0:
            campaign.status = 'completed'
            campaign.completed_at = timezone.now()
            campaign.save()
            return {
                'status': 'success',
                'message': 'No users to notify for this topic'
            }
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 100
        user_ids = list(users_to_notify.values_list('id', flat=True))
        chunk_size = 100
        user_chunks = [user_ids[i:i + chunk_size] for i in range(0, len(user_ids), chunk_size)]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        for i, chunk in enumerate(user_chunks):
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            send_notifications_chunk_task.apply_async(
                args=[campaign_id, chunk, i],
                countdown=i * 2  # 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
            )
        
        return {
            'status': 'success',
            'message': f'Started notification campaign for {campaign.total_users} users in {len(user_chunks)} chunks'
        }
        
    except NotificationCampaign.DoesNotExist:
        return {
            'status': 'error',
            'message': f'NotificationCampaign with id {campaign_id} not found'
        }
    except SoftTimeLimitExceeded:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
        try:
            campaign = NotificationCampaign.objects.get(id=campaign_id)
            campaign.status = 'failed'
            campaign.error_message = 'Task timed out - campaign took too long'
            campaign.save()
        except NotificationCampaign.DoesNotExist:
            pass
        
        return {
            'status': 'error',
            'message': 'Task timed out - campaign took too long'
        }
    except Exception as e:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–æ—à–∏–±–∫–∞"
        try:
            campaign = NotificationCampaign.objects.get(id=campaign_id)
            campaign.status = 'failed'
            campaign.error_message = str(e)
            campaign.save()
        except NotificationCampaign.DoesNotExist:
            pass
        
        return {
            'status': 'error',
            'message': str(e)
        }


@shared_task(bind=True, soft_time_limit=300, time_limit=360)  # 5 min soft, 6 min hard
def send_notifications_chunk_task(self, campaign_id, user_ids, chunk_index):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–æ 100 —á–µ–ª–æ–≤–µ–∫).
    –£—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
    """
    try:
        from .models import NotificationCampaign, Poll
        from apps.users.models import TGUser
        from apps.bot.misc import get_bot_instance
        from django.utils.translation import gettext as _
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        import time
        
        campaign = NotificationCampaign.objects.get(id=campaign_id)
        topic = campaign.topic
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        # –í TGUser.id —Ö—Ä–∞–Ω–∏—Ç—Å—è telegram_id (chat_id –¥–ª—è –±–æ—Ç–∞)
        # –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = TGUser.objects.filter(id__in=user_ids, is_active=True, blocked_bot=False)
        
        sent_count = 0
        failed_count = 0
        
        for i, user in enumerate(users):
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                markup = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üîÑ –î–∞–≤–æ–º —ç—Ç–∏—à", callback_data=f"poll_continue:{topic.uuid}"),
                        InlineKeyboardButton(text="‚ôªÔ∏è “ö–∞–π—Ç–∞ –±–æ—à–ª–∞—à", callback_data=f"poll_restart:{topic.uuid}")
                    ]
                ])
                
                # –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                message_text = str(_("–°–∏–∑ —Å—û—Ä–æ–≤–Ω–æ–º–∞–Ω–∏ —Ç—û–ª–∏“õ —è–∫—É–Ω–ª–∞–º–∞–≥–∞–Ω—Å–∏–∑. –î–∞–≤–æ–º —ç—Ç–∞—Å–∏–∑–º–∏ —ë–∫–∏ “õ–∞–π—Ç–∞ –±–æ—à–ª–∞–π—Å–∏–∑–º–∏?"))
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                bot = get_bot_instance()
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                import asyncio
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    loop.run_until_complete(
                        bot.send_message(
                            chat_id=user.id,  # –í TGUser.id —Ö—Ä–∞–Ω–∏—Ç—Å—è telegram_id
                            text=message_text,
                            reply_markup=markup
                        )
                    )
                finally:
                    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
                    loop.run_until_complete(bot.session.close())
                    loop.close()
                
                sent_count += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –∫–∞–º–ø–∞–Ω–∏–∏
                campaign.sent_users += 1
                campaign.save()
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (1 —Å–µ–∫—É–Ω–¥–∞)
                if i < len(users) - 1:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    time.sleep(1)
                
            except Exception as e:
                failed_count += 1
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                print(f"Failed to send notification to user {user.id}: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –±–æ—Ç–∞
                error_message = str(e).lower()
                if any(keyword in error_message for keyword in [
                    'bot was blocked', 'user is deactivated', 'chat not found',
                    'forbidden', 'blocked', 'deactivated', 'bot blocked by user'
                ]):
                    # –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–µ–≥–æ –±–æ—Ç–∞
                    user.blocked_bot = True
                    user.save()
                    print(f"Marked user {user.id} as blocked_bot=True due to error: {e}")
                
                continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –≤—Å—è –∫–∞–º–ø–∞–Ω–∏—è
        if campaign.sent_users >= campaign.total_users:
            campaign.status = 'completed'
            campaign.completed_at = timezone.now()
            campaign.save()
        
        return {
            'status': 'success',
            'chunk_index': chunk_index,
            'sent_count': sent_count,
            'failed_count': failed_count,
            'message': f'Chunk {chunk_index}: sent {sent_count}, failed {failed_count}'
        }
        
    except NotificationCampaign.DoesNotExist:
        return {
            'status': 'error',
            'message': f'NotificationCampaign with id {campaign_id} not found'
        }
    except SoftTimeLimitExceeded:
        return {
            'status': 'error',
            'message': f'Chunk {chunk_index} timed out'
        }
    except Exception as e:
        return {
            'status': 'error',
            'chunk_index': chunk_index,
            'message': str(e)
        }


@shared_task
def cleanup_old_exports():
    """
    –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
    """
    from datetime import timedelta
    
    cutoff_date = timezone.now() - timedelta(days=30)
    old_exports = ExportFile.objects.filter(
        created_at__lt=cutoff_date,
        status__in=['completed', 'failed']
    )
    
    count = old_exports.count()
    old_exports.delete()
    
    return {
        'status': 'success',
        'deleted_count': count
    }


@shared_task(bind=True, soft_time_limit=1800, time_limit=2100)  # 30 min soft, 35 min hard
def start_broadcast_task(self, broadcast_id):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–∞.
    –†–∞–∑–±–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 100 –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –¥–æ—á–µ—Ä–Ω–∏–µ –∑–∞–¥–∞—á–∏.
    """
    try:
        from .models import BroadcastPost
        from apps.users.models import TGUser
        
        broadcast = BroadcastPost.objects.get(id=broadcast_id)
        broadcast.status = 'sending'
        broadcast.started_at = timezone.now()
        broadcast.save()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞
        all_users = TGUser.objects.filter(is_active=True, blocked_bot=False)
        broadcast.total_users = all_users.count()
        broadcast.save()
        
        if broadcast.total_users == 0:
            broadcast.status = 'sent'
            broadcast.completed_at = timezone.now()
            broadcast.save()
            return {
                'status': 'success',
                'message': 'No active users to send broadcast to'
            }
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 100
        user_ids = list(all_users.values_list('id', flat=True))
        chunk_size = 100
        user_chunks = [user_ids[i:i + chunk_size] for i in range(0, len(user_ids), chunk_size)]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        for i, chunk in enumerate(user_chunks):
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            send_broadcast_chunk_task.apply_async(
                args=[broadcast_id, chunk, i],
                countdown=i * 2  # 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
            )
        
        return {
            'status': 'success',
            'message': f'Started broadcast for {broadcast.total_users} users in {len(user_chunks)} chunks'
        }
        
    except BroadcastPost.DoesNotExist:
        return {
            'status': 'error',
            'message': f'BroadcastPost with id {broadcast_id} not found'
        }
    except SoftTimeLimitExceeded:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
        try:
            broadcast = BroadcastPost.objects.get(id=broadcast_id)
            broadcast.status = 'failed'
            broadcast.error_message = 'Task timed out - broadcast took too long'
            broadcast.save()
        except BroadcastPost.DoesNotExist:
            pass
        
        return {
            'status': 'error',
            'message': 'Task timed out - broadcast took too long'
        }
    except Exception as e:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–æ—à–∏–±–∫–∞"
        try:
            broadcast = BroadcastPost.objects.get(id=broadcast_id)
            broadcast.status = 'failed'
            broadcast.error_message = str(e)
            broadcast.save()
        except BroadcastPost.DoesNotExist:
            pass
        
        return {
            'status': 'error',
            'message': str(e)
        }


@shared_task(bind=True, soft_time_limit=300, time_limit=360)  # 5 min soft, 6 min hard
def send_broadcast_chunk_task(self, broadcast_id, user_ids, chunk_index):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç –≥—Ä—É–ø–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–æ 100 —á–µ–ª–æ–≤–µ–∫).
    –£—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
    """
    try:
        from .models import BroadcastPost
        from apps.users.models import TGUser
        from apps.bot.misc import get_bot_instance
        from aiogram.types import InputFile
        import time
        
        broadcast = BroadcastPost.objects.get(id=broadcast_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏—Ö –±–æ—Ç–∞)
        users = TGUser.objects.filter(
            id__in=user_ids, 
            is_active=True, 
            blocked_bot=False
        )
        
        sent_count = 0
        failed_count = 0
        
        for i, user in enumerate(users):
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                bot = get_bot_instance()
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                import asyncio
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    if broadcast.image:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                        photo = InputFile(broadcast.image.path)
                        loop.run_until_complete(
                            bot.send_photo(
                                chat_id=user.id,
                                photo=photo,
                                caption=f"<b>{broadcast.title}</b>\n\n{broadcast.content}",
                                parse_mode="HTML"
                            )
                        )
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                        loop.run_until_complete(
                            bot.send_message(
                                chat_id=user.id,
                                text=f"<b>{broadcast.title}</b>\n\n{broadcast.content}",
                                parse_mode="HTML"
                            )
                        )
                finally:
                    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
                    loop.run_until_complete(bot.session.close())
                    loop.close()
                
                sent_count += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ
                broadcast.sent_users += 1
                broadcast.save()
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (1 —Å–µ–∫—É–Ω–¥–∞)
                if i < len(users) - 1:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    time.sleep(1)
                
            except Exception as e:
                failed_count += 1
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ
                broadcast.failed_users += 1
                broadcast.save()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞
                error_message = str(e).lower()
                if any(keyword in error_message for keyword in ['blocked', 'forbidden', 'chat not found']):
                    # –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–µ–≥–æ –±–æ—Ç–∞
                    user.blocked_bot = True
                    user.is_active = False
                    user.save()
                    print(f"User {user.id} ({user.fullname}) blocked the bot during broadcast")
                else:
                    print(f"Failed to send broadcast to user {user.id}: {e}")
                continue
        
        # –°—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ü–∏–∫–ª–µ
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –≤—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞
        if broadcast.sent_users + broadcast.failed_users >= broadcast.total_users:
            broadcast.status = 'sent'
            broadcast.completed_at = timezone.now()
            broadcast.save()
        
        return {
            'status': 'success',
            'chunk_index': chunk_index,
            'sent_count': sent_count,
            'failed_count': failed_count,
            'message': f'Chunk {chunk_index}: sent {sent_count}, failed {failed_count}'
        }
        
    except BroadcastPost.DoesNotExist:
        return {
            'status': 'error',
            'message': f'BroadcastPost with id {broadcast_id} not found'
        }
    except SoftTimeLimitExceeded:
        return {
            'status': 'error',
            'message': f'Chunk {chunk_index} timed out'
        }
    except Exception as e:
        return {
            'status': 'error',
            'chunk_index': chunk_index,
            'message': str(e)
        }


@shared_task(bind=True, soft_time_limit=60, time_limit=120)  # 1 min soft, 2 min hard
def send_test_broadcast_task(self, broadcast_id, test_user_id):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ Telegram ID.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –ø–æ—Å—Ç–∞ –ø–µ—Ä–µ–¥ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–æ–π.
    """
    try:
        from .models import BroadcastPost
        from apps.users.models import TGUser
        from apps.bot.misc import get_bot_instance
        from aiogram.types import InputFile
        import asyncio
        
        broadcast = BroadcastPost.objects.get(id=broadcast_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID
        try:
            test_user = TGUser.objects.get(id=test_user_id)
        except TGUser.DoesNotExist:
            return {
                'status': 'error',
                'message': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {test_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
            }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot = get_bot_instance()
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            if broadcast.image:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                photo = InputFile(broadcast.image.path)
                loop.run_until_complete(
                    bot.send_photo(
                        chat_id=test_user_id,
                        photo=photo,
                        caption=f"<b>{broadcast.title}</b>\n\n{broadcast.content}",
                        parse_mode="HTML"
                    )
                )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                loop.run_until_complete(
                    bot.send_message(
                        chat_id=test_user_id,
                        text=f"<b>{broadcast.title}</b>\n\n{broadcast.content}",
                        parse_mode="HTML"
                    )
                )
        finally:
            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
            loop.run_until_complete(bot.session.close())
            loop.close()
        
        return {
            'status': 'success',
            'message': f'–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {test_user.fullname} (ID: {test_user_id})'
        }
        
    except BroadcastPost.DoesNotExist:
        return {
            'status': 'error',
            'message': f'BroadcastPost —Å ID {broadcast_id} –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }
    except Exception as e:
        return {
            'status': 'error',
            'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞: {str(e)}'
        }


@shared_task(bind=True, soft_time_limit=1800, time_limit=2100)
def export_respondents_chunked_task(self, export_file_id, chunk_size=1000, max_chunks=10):
    """
    –ó–∞–¥–∞—á–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è chunked —ç–∫—Å–ø–æ—Ä—Ç–∞ - —Ä–∞–∑–±–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ —á–∞—Å—Ç–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
    """
    try:
        export_file = ExportFile.objects.get(id=export_file_id)
        export_file.status = "processing"
        export_file.save()

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—É—Ä—Å –∏ queryset
        resource = RespondentExportResource(
            poll=export_file.poll,
            include_unfinished=export_file.include_unfinished,
        )
        queryset = resource.get_export_queryset(None)
        total_count = queryset.count()
        
        if total_count == 0:
            export_file.status = "completed"
            export_file.completed_at = timezone.now()
            export_file.save()
            return {"status": "success", "message": "No data to export"}

        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ chunks
        total_chunks = min(max_chunks, (total_count + chunk_size - 1) // chunk_size)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_file.is_chunked = True
        export_file.total_chunks = total_chunks
        export_file.chunk_size = chunk_size
        export_file.save()

        # –°–æ–∑–¥–∞–µ–º chunk –∑–∞–ø–∏—Å–∏
        chunks = []
        for i in range(total_chunks):
            chunk = ExportChunk.objects.create(
                export_file=export_file,
                chunk_number=i + 1,
                filename=f"{export_file.filename}_part_{i + 1}.xlsx"
            )
            chunks.append(chunk)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ chunk
        for chunk in chunks:
            export_chunk_task.delay(chunk.id)

        return {
            "status": "success",
            "export_file_id": export_file_id,
            "total_chunks": total_chunks,
            "chunk_size": chunk_size,
            "total_records": total_count
        }

    except ExportFile.DoesNotExist:
        return {"status": "error", "message": f"ExportFile with id {export_file_id} not found"}
    except Exception as e:
        try:
            export_file = ExportFile.objects.get(id=export_file_id)
            export_file.status = "failed"
            export_file.error_message = str(e)
            export_file.save()
        except ExportFile.DoesNotExist:
            pass
        return {"status": "error", "message": str(e)}


@shared_task(bind=True, soft_time_limit=600, time_limit=900)  # 10 min soft, 15 min hard
def export_chunk_task(self, chunk_id):
    """
    –ó–∞–¥–∞—á–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ chunk
    """
    try:
        chunk = ExportChunk.objects.get(id=chunk_id)
        chunk.status = "processing"
        chunk.save()

        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Å–ø–æ—Ä—Ç
        export_file = chunk.export_file
        resource = RespondentExportResource(
            poll=export_file.poll,
            include_unfinished=export_file.include_unfinished,
        )
        queryset = resource.get_export_queryset(None)
        export_fields = resource.get_export_fields()

        # –í—ã—á–∏—Å–ª—è–µ–º offset –∏ limit –¥–ª—è —ç—Ç–æ–≥–æ chunk
        offset = (chunk.chunk_number - 1) * export_file.chunk_size
        limit = export_file.chunk_size

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ chunk
        chunk_queryset = queryset[offset:offset + limit]

        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        wb = Workbook(write_only=True)
        ws = wb.create_sheet(title="Respondents")

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = [f.column_name for f in export_fields]
        ws.append(headers)

        # –î–∞–Ω–Ω—ã–µ
        rows_exported = 0
        for respondent in chunk_queryset:
            row = resource.export_resource(respondent)
            ws.append([row.get(f.attribute or f.column_name, "") for f in export_fields])
            rows_exported += 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        timestamp = timezone.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{chunk.filename}_{timestamp}.xlsx"

        with NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
            wb.save(tmp.name)
            tmp.seek(0)
            chunk.file.save(filename, File(tmp), save=False)

        # –û–±–Ω–æ–≤–ª—è–µ–º chunk
        chunk.filename = filename
        chunk.rows_count = rows_exported
        chunk.status = "completed"
        chunk.completed_at = timezone.now()
        chunk.save()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –≤–µ—Å—å —ç–∫—Å–ø–æ—Ä—Ç
        check_export_completion.delay(export_file.id)

        return {
            "status": "success",
            "chunk_id": chunk_id,
            "rows_exported": rows_exported,
            "filename": filename
        }

    except ExportChunk.DoesNotExist:
        return {"status": "error", "message": f"ExportChunk with id {chunk_id} not found"}
    except SoftTimeLimitExceeded:
        try:
            chunk = ExportChunk.objects.get(id=chunk_id)
            chunk.status = "failed"
            chunk.error_message = "Task timed out - chunk export took too long"
            chunk.save()
        except ExportChunk.DoesNotExist:
            pass
        return {"status": "error", "message": "Task timed out - chunk export took too long"}
    except Exception as e:
        try:
            chunk = ExportChunk.objects.get(id=chunk_id)
            chunk.status = "failed"
            chunk.error_message = str(e)
            chunk.save()
        except ExportChunk.DoesNotExist:
            pass
        return {"status": "error", "message": str(e)}


@shared_task(bind=True)
def check_export_completion(self, export_file_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –≤–µ—Å—å chunked —ç–∫—Å–ø–æ—Ä—Ç
    """
    try:
        export_file = ExportFile.objects.get(id=export_file_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö chunks
        completed_chunks = export_file.chunks.filter(status='completed').count()
        failed_chunks = export_file.chunks.filter(status='failed').count()
        total_chunks = export_file.total_chunks
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö chunks
        export_file.completed_chunks = completed_chunks
        export_file.save()
        
        if completed_chunks >= total_chunks:
            # –í—Å–µ chunks –∑–∞–≤–µ—Ä—à–µ–Ω—ã
            export_file.status = "completed"
            export_file.completed_at = timezone.now()
            export_file.save()
            
            return {
                "status": "success",
                "message": "All chunks completed",
                "completed_chunks": completed_chunks,
                "total_chunks": total_chunks
            }
        elif failed_chunks > 0 and (completed_chunks + failed_chunks) >= total_chunks:
            # –ï—Å—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ chunks, –Ω–æ –≤—Å–µ chunks –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
            export_file.status = "failed"
            export_file.error_message = f"Some chunks failed. Completed: {completed_chunks}, Failed: {failed_chunks}"
            export_file.save()
            
            return {
                "status": "error",
                "message": "Some chunks failed",
                "completed_chunks": completed_chunks,
                "failed_chunks": failed_chunks,
                "total_chunks": total_chunks
            }
        else:
            # –≠–∫—Å–ø–æ—Ä—Ç –µ—â–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
            return {
                "status": "processing",
                "message": "Export still in progress",
                "completed_chunks": completed_chunks,
                "total_chunks": total_chunks
            }
            
    except ExportFile.DoesNotExist:
        return {"status": "error", "message": f"ExportFile with id {export_file_id} not found"}
    except Exception as e:
        return {"status": "error", "message": str(e)}


@shared_task(bind=True, soft_time_limit=300, time_limit=360)  # 5 min soft, 6 min hard
def send_update_notification_task(self, user_ids, chunk_index, custom_message=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–æ 100 —á–µ–ª–æ–≤–µ–∫).
    –£—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
    """
    try:
        from apps.users.models import TGUser
        from apps.bot.misc import get_bot_instance
        import time
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        users = TGUser.objects.filter(id__in=user_ids, is_active=True, blocked_bot=False)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
        if custom_message:
            messages = {
                'uz_cyrl': custom_message,
                'uz_latn': custom_message,
                'ru': custom_message
            }
        else:
            messages = {
                'uz_cyrl': (
                    "üéâ <b>–Ø–Ω–≥–∏–ª–∞–Ω–∏—à!</b>\n\n"
                    "–ë–æ—Ç–¥–∞ —è–Ω–≥–∏ –∏–º–∫–æ–Ω–∏—è—Ç–ª–∞—Ä “õ—û—à–∏–ª–¥–∏:\n\n"
                    "üí∞ <b>–ü—É–ª –∏—à–ª–∞—à</b> - –°—û—Ä–æ–≤–Ω–æ–º–∞–ª–∞—Ä–Ω–∏ —Ç—û–ª–¥–∏—Ä–∏–± –ø—É–ª –∏—à–ª–∞–± —Ç–æ–ø–∏–Ω–≥!\n"
                    "üìä –ê–∫—Ç–∏–≤ –≤–∞ —è–∫—É–Ω–ª–∞–Ω–≥–∞–Ω —Å—û—Ä–æ–≤–Ω–æ–º–∞–ª–∞—Ä–Ω–∏ –∫—û—Ä–∏–Ω–≥\n"
                    "üí≥ –ò—à–ª–∞–± —Ç–æ–ø–≥–∞–Ω –ø—É–ª–ª–∞—Ä–∏–Ω–≥–∏–∑–Ω–∏ —á–∏“õ–∞—Ä–∏—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ω\n"
                    "üåê –¢–∏–ª–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à –∏–º–∫–æ–Ω–∏\n\n"
                    "–ë–æ—à–ª–∞—à —É—á—É–Ω /menu –±—É–π—Ä—É“ì–∏–Ω–∏ —é–±–æ—Ä–∏–Ω–≥!"
                ),
                'uz_latn': (
                    "üéâ <b>Yangilanish!</b>\n\n"
                    "Botda yangi imkoniyatlar qo'shildi:\n\n"
                    "üí∞ <b>Pul ishlash</b> - So'rovnomalarni to'ldirib pul ishlab toping!\n"
                    "üìä Aktiv va yakunlangan so'rovnomalarni ko'ring\n"
                    "üí≥ Ishlab topgan pullaringizni chiqarishingiz mumkin\n"
                    "üåê Tilni o'zgartirish imkoni\n\n"
                    "Boshlash uchun /menu buyrug'ini yuboring!"
                ),
                'ru': (
                    "üéâ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ!</b>\n\n"
                    "–í –±–æ—Ç–µ –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n\n"
                    "üí∞ <b>–ó–∞—Ä–∞–±–æ—Ç–æ–∫</b> - –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –¥–µ–Ω—å–≥–∏, –∑–∞–ø–æ–ª–Ω—è—è –æ–ø—Ä–æ—Å—ã!\n"
                    "üìä –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å—ã\n"
                    "üí≥ –í—ã–≤–æ–¥–∏—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏\n"
                    "üåê –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–º–µ–Ω—ã —è–∑—ã–∫–∞\n\n"
                    "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu!"
                )
            }
        
        sent_count = 0
        failed_count = 0
        
        for i, user in enumerate(users):
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                message_text = messages.get(user.lang, messages['uz_cyrl'])
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                bot = get_bot_instance()
                import asyncio
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    loop.run_until_complete(
                        bot.send_message(
                            chat_id=user.id,
                            text=message_text,
                            parse_mode="HTML"
                        )
                    )
                finally:
                    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
                    loop.run_until_complete(bot.session.close())
                    loop.close()
                
                sent_count += 1
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (1 —Å–µ–∫—É–Ω–¥–∞)
                if i < len(users) - 1:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    time.sleep(1)
                
            except Exception as e:
                failed_count += 1
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                print(f"Failed to send update notification to user {user.id}: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –±–æ—Ç–∞
                error_message = str(e).lower()
                if any(keyword in error_message for keyword in [
                    'bot was blocked', 'user is deactivated', 'chat not found',
                    'forbidden', 'blocked', 'deactivated', 'bot blocked by user'
                ]):
                    # –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–µ–≥–æ –±–æ—Ç–∞
                    user.blocked_bot = True
                    user.save()
                    print(f"Marked user {user.id} as blocked_bot=True due to error: {e}")
                
                continue
        
        return {
            'status': 'success',
            'chunk_index': chunk_index,
            'sent_count': sent_count,
            'failed_count': failed_count,
            'message': f'Chunk {chunk_index}: sent {sent_count}, failed {failed_count}'
        }
        
    except SoftTimeLimitExceeded:
        return {
            'status': 'error',
            'message': f'Chunk {chunk_index} timed out'
        }
    except Exception as e:
        return {
            'status': 'error',
            'chunk_index': chunk_index,
            'message': str(e)
        }
