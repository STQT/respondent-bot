"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ø—á–∏ (–∞–Ω—Ç–∏–±–æ—Ç)
"""
import random
from typing import Tuple


def generate_math_captcha(lang='uz_cyrl') -> Tuple[str, str]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–∞–ø—á—É
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–≤–æ–ø—Ä–æ—Å, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π_–æ—Ç–≤–µ—Ç)
    """
    operations = [
        ('add', '+'),
        ('subtract', '-'),
        ('multiply', '√ó'),
    ]
    
    operation_type, symbol = random.choice(operations)
    
    if operation_type == 'add':
        a = random.randint(1, 50)
        b = random.randint(1, 50)
        answer = str(a + b)
    elif operation_type == 'subtract':
        a = random.randint(20, 100)
        b = random.randint(1, a - 1)
        answer = str(a - b)
    else:  # multiply
        a = random.randint(1, 12)
        b = random.randint(1, 12)
        answer = str(a * b)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
    texts = {
        'uz_cyrl': f"ü§ñ –ê–Ω—Ç–∏–±–æ—Ç —Ç–µ–∫—à–∏—Ä—É–≤–∏\n\n“≤–∏—Å–æ–±–ª–∞–Ω–≥: {a} {symbol} {b} = ?\n\n–ò–ª—Ç–∏–º–æ—Å, –∂–∞–≤–æ–±–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:",
        'uz_latn': f"ü§ñ Antibot tekshiruvi\n\nHisoblang: {a} {symbol} {b} = ?\n\nIltimos, javobni kiriting:",
        'ru': f"ü§ñ –ê–Ω—Ç–∏–±–æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞\n\n–í—ã—á–∏—Å–ª–∏—Ç–µ: {a} {symbol} {b} = ?\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:"
    }
    
    question = texts.get(lang, texts['uz_cyrl'])
    
    return question, answer


def generate_text_captcha(lang='uz_cyrl') -> Tuple[str, str]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–∞–ø—á—É (–ø–æ–≤—Ç–æ—Ä —Å–ª–æ–≤–∞/—á–∏—Å–ª–∞)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–≤–æ–ø—Ä–æ—Å, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π_–æ—Ç–≤–µ—Ç)
    """
    captcha_types = [
        'word',
        'number',
    ]
    
    captcha_type = random.choice(captcha_types)
    
    if captcha_type == 'word':
        words_uz_cyrl = ['–∫–∏—Ç–æ–±', '“õ–∞–ª–∞–º', '–¥–∞—Ñ—Ç–∞—Ä', '—Å—Ç–æ–ª', '–∫—É—Ä—Å–∏', '–æ–π–Ω–∞', '—ç—à–∏–∫', '–∫–∏—Ç–æ–±']
        words_uz_latn = ['kitob', 'qalam', 'daftar', 'stol', 'kursi', 'oyna', 'eshik', 'kitob']
        words_ru = ['–∫–Ω–∏–≥–∞', '—Ä—É—á–∫–∞', '—Ç–µ—Ç—Ä–∞–¥—å', '—Å—Ç–æ–ª', '—Å—Ç—É–ª', '–æ–∫–Ω–æ', '–¥–≤–µ—Ä—å', '–∫–Ω–∏–≥–∞']
        
        if lang == 'uz_cyrl':
            word = random.choice(words_uz_cyrl)
            question = f"ü§ñ –ê–Ω—Ç–∏–±–æ—Ç —Ç–µ–∫—à–∏—Ä—É–≤–∏\n\n“ö—É–π–∏–¥–∞–≥–∏ —Å—û–∑–Ω–∏ “õ–∞–π—Ç–∞ —ë–∑–∏–Ω–≥:\n\n<code>{word}</code>"
        elif lang == 'uz_latn':
            word = random.choice(words_uz_latn)
            question = f"ü§ñ Antibot tekshiruvi\n\nQuyidagi so'zni qayta yozing:\n\n<code>{word}</code>"
        else:  # ru
            word = random.choice(words_ru)
            question = f"ü§ñ –ê–Ω—Ç–∏–±–æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞\n\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ:\n\n<code>{word}</code>"
        
        answer = word
    else:  # number
        number = random.randint(1000, 9999)
        answer = str(number)
        
        if lang == 'uz_cyrl':
            question = f"ü§ñ –ê–Ω—Ç–∏–±–æ—Ç —Ç–µ–∫—à–∏—Ä—É–≤–∏\n\n“ö—É–π–∏–¥–∞–≥–∏ —Ä–∞“õ–∞–º–Ω–∏ “õ–∞–π—Ç–∞ —ë–∑–∏–Ω–≥:\n\n<code>{number}</code>"
        elif lang == 'uz_latn':
            question = f"ü§ñ Antibot tekshiruvi\n\nQuyidagi raqamni qayta yozing:\n\n<code>{number}</code>"
        else:  # ru
            question = f"ü§ñ –ê–Ω—Ç–∏–±–æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞\n\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —á–∏—Å–ª–æ:\n\n<code>{number}</code>"
    
    return question, answer


def should_show_captcha(answered_count: int) -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞–ø—á—É
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ø—á—É —Å–ª—É—á–∞–π–Ω–æ, –ø—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∂–¥—ã–µ 3-5 –≤–æ–ø—Ä–æ—Å–æ–≤
    """
    # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—ã—Ö 2 –≤–æ–ø—Ä–æ—Å–∞—Ö
    if answered_count < 2:
        return False
    
    # –ü–æ—Å–ª–µ 2 –≤–æ–ø—Ä–æ—Å–æ–≤ - —Å–ª—É—á–∞–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
    # –ò–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫–∞–∂–¥—ã–µ 5 –≤–æ–ø—Ä–æ—Å–æ–≤
    if answered_count % 5 == 0:
        return True
    
    return random.random() < 0.3


def get_captcha_error_message(lang='uz_cyrl', attempts=0) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∫–∞–ø—á–∏"""
    texts = {
        'uz_cyrl': f"‚ùå –ù–æ—Ç—û“ì—Ä–∏ –∂–∞–≤–æ–±! “ö–∞–π—Ç–∞ —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥.\n\n–£—Ä–∏–Ω–∏—à–ª–∞—Ä: {attempts}/3",
        'uz_latn': f"‚ùå Noto'g'ri javob! Qayta urinib ko'ring.\n\nUrinishlar: {attempts}/3",
        'ru': f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n–ü–æ–ø—ã—Ç–æ–∫: {attempts}/3"
    }
    return texts.get(lang, texts['uz_cyrl'])


def get_captcha_failed_message(lang='uz_cyrl') -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–∞–ª–µ –∫–∞–ø—á–∏"""
    texts = {
        'uz_cyrl': (
            "‚ùå –°–∏–∑ 3 –º–∞—Ä—Ç–∞ –Ω–æ—Ç—û“ì—Ä–∏ –∂–∞–≤–æ–± –±–µ—Ä–¥–∏–Ω–≥–∏–∑.\n\n"
            "–°—û—Ä–æ–≤–Ω–æ–º–∞ —Ç—û—Ö—Ç–∞—Ç–∏–ª–¥–∏. –ò–ª—Ç–∏–º–æ—Å, –±–æ—à“õ–∞—Ç–¥–∞–Ω —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥."
        ),
        'uz_latn': (
            "‚ùå Siz 3 marta noto'g'ri javob berdingiz.\n\n"
            "So'rovnoma to'xtatildi. Iltimos, boshqatdan urinib ko'ring."
        ),
        'ru': (
            "‚ùå –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ 3 —Ä–∞–∑–∞.\n\n"
            "–û–ø—Ä–æ—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
    }
    return texts.get(lang, texts['uz_cyrl'])


def get_captcha_success_message(lang='uz_cyrl') -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∫–∞–ø—á–µ"""
    texts = {
        'uz_cyrl': "‚úÖ –¢—û“ì—Ä–∏! –°—û—Ä–æ–≤–Ω–æ–º–∞ –¥–∞–≤–æ–º —ç—Ç–∞–¥–∏...",
        'uz_latn': "‚úÖ To'g'ri! So'rovnoma davom etadi...",
        'ru': "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û–ø—Ä–æ—Å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è..."
    }
    return texts.get(lang, texts['uz_cyrl'])

