from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from django.utils.translation import gettext_lazy as _
from django.utils.translation import override


TG_LANGUAGES = ["üá∫üáø O'zbek", "üá∑üá∫ –†—É—Å—Å–∫–∏–π"]
CASH_TYPE = [str(_("üí¥ Naqd")), str(_("üí≤ Click"))]
BACK_BUTTON = str(_("‚¨ÖÔ∏è Ortga"))
CHANGE_LANG_BUTTON = str(_("üåé Tilni sozlash"))
CART_BUTTON = str(_("üõí Savat"))


def get_language_keyboards(back_button: bool = False):
    language_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=language) for language in TG_LANGUAGES],
        ],
        resize_keyboard=True,
    )
    if back_button:
        language_keyboard.keyboard.append([KeyboardButton(text=BACK_BUTTON)])
    return language_keyboard


def get_cash_type_keyboards():
    language_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=cash_type) for cash_type in CASH_TYPE],
        ],
        resize_keyboard=True,
    )
    return language_keyboard


def get_phone_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=str(_("üì± Telefon yuborish")), request_contact=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard


def get_payment_type_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=CASH_TYPE[0])], # Naqd
            [KeyboardButton(text=CASH_TYPE[1])], # Click
            [KeyboardButton(text=str(_("Yetkazib berish")))],
            [KeyboardButton(text=BACK_BUTTON)],
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard

def get_language_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=TG_LANGUAGES[0])], # Uzbek
            [KeyboardButton(text=TG_LANGUAGES[1])],
            [KeyboardButton(text=BACK_BUTTON)],
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard



def make_row_keyboard(items: list[str], add_back: bool = False, lang="uz") -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç —Ä–µ–ø–ª–∞–π-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    :param items: —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    :param add_back: –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "Ortga" –≤–º–µ—Å—Ç–æ "Savat"
    :return: –æ–±—ä–µ–∫—Ç —Ä–µ–ø–ª–∞–π-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
    with override(lang):
        keyboard = [
            [KeyboardButton(text=items[i]), KeyboardButton(text=items[i + 1])]
            for i in range(0, len(items) - 1, 2)
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –Ω–µ—á—ë—Ç–Ω–æ–µ
        if len(items) % 2 != 0:
            keyboard.append([KeyboardButton(text=items[-1])])

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∏–∂–Ω–∏–π —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–æ–π "Ortga" –∏–ª–∏ "Savat"
        if add_back:
            bottom_row = [KeyboardButton(text=BACK_BUTTON)]
        else:
            bottom_row = [KeyboardButton(text=CART_BUTTON), KeyboardButton(text=CHANGE_LANG_BUTTON)]
        keyboard.append(bottom_row)

        return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
