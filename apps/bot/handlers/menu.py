from decimal import Decimal
from aiogram import Router
from aiogram.enums import ChatAction
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from asgiref.sync import sync_to_async
from django.utils import timezone
from django.db.models import Q

from apps.bot.states import PollStates, WithdrawalStates
from apps.users.models import TGUser, WithdrawalRequest, TransactionHistory, LanguageChoices
from apps.polls.models import Poll, Respondent


menu_router = Router()


def get_main_menu_keyboard(lang='uz_cyrl'):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞"""
    texts = {
        'uz_cyrl': {
            'balance': 'üí∞ –ë–∞–ª–∞–Ω—Å',
            'language': 'üåê –¢–∏–ª–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à',
            'active_polls': 'üìä –ê–∫—Ç–∏–≤ —Å—û—Ä–æ–≤–Ω–æ–º–∞–ª–∞—Ä',
            'completed_polls': '‚úÖ –Ø–∫—É–Ω–ª–∞–Ω–≥–∞–Ω —Å—û—Ä–æ–≤–Ω–æ–º–∞–ª–∞—Ä',
            'withdrawal_history': 'üìú –ß–∏“õ–∞—Ä–∏—à —Ç–∞—Ä–∏—Ö–∏'
        },
        'uz_latn': {
            'balance': "üí∞ Balans",
            'language': "üåê Tilni o'zgartirish",
            'active_polls': "üìä Aktiv so'rovnomalar",
            'completed_polls': "‚úÖ Yakunlangan so'rovnomalar",
            'withdrawal_history': "üìú Chiqarish tarixi"
        },
        'ru': {
            'balance': 'üí∞ –ë–∞–ª–∞–Ω—Å',
            'language': 'üåê –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫',
            'active_polls': 'üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã',
            'completed_polls': '‚úÖ –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å—ã',
            'withdrawal_history': 'üìú –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤'
        }
    }
    
    text = texts.get(lang, texts['uz_cyrl'])
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=text['balance'])],
            [KeyboardButton(text=text['language'])],
            [KeyboardButton(text=text['active_polls'])],
            [KeyboardButton(text=text['completed_polls'])],
            [KeyboardButton(text=text['withdrawal_history'])]
        ],
        resize_keyboard=True
    )
    
    return keyboard


def get_text(key, lang='uz_cyrl'):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ"""
    texts = {
        'balance_info': {
            'uz_cyrl': 'üí∞ –°–∏–∑–Ω–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∏–Ω–≥–∏–∑: {balance} —Å—û–º\n\n–°–∏–∑ —Å—û—Ä–æ–≤–Ω–æ–º–∞–ª–∞—Ä–Ω–∏ —Ç—û–ª–¥–∏—Ä–∏—à –æ—Ä“õ–∞–ª–∏ –ø—É–ª –∏—à–ª–∞–± —Ç–æ–ø–∏—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ω.',
            'uz_latn': "üí∞ Sizning balansigiz: {balance} so'm\n\nSiz so'rovnomalarni to'ldirish orqali pul ishlab topishingiz mumkin.",
            'ru': 'üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Å—É–º\n\n–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏, –∑–∞–ø–æ–ª–Ω—è—è –æ–ø—Ä–æ—Å—ã.'
        },
        'withdraw_button': {
            'uz_cyrl': 'üí≥ –ü—É–ª–Ω–∏ —á–∏“õ–∞—Ä–∏—à',
            'uz_latn': "üí≥ Pulni chiqarish",
            'ru': 'üí≥ –í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏'
        },
        'language_select': {
            'uz_cyrl': 'üåê –¢–∏–ª–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:',
            'uz_latn': "üåê Tilni tanlang:",
            'ru': 'üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:'
        },
        'language_changed': {
            'uz_cyrl': '‚úÖ –¢–∏–ª –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–ª–¥–∏!',
            'uz_latn': "‚úÖ Til muvaffaqiyatli o'zgartirildi!",
            'ru': '‚úÖ –Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!'
        },
        'active_polls_title': {
            'uz_cyrl': 'üìä –ê–∫—Ç–∏–≤ —Å—û—Ä–æ–≤–Ω–æ–º–∞–ª–∞—Ä:\n\n',
            'uz_latn': "üìä Aktiv so'rovnomalar:\n\n",
            'ru': 'üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã:\n\n'
        },
        'no_active_polls': {
            'uz_cyrl': '“≤–æ–∑–∏—Ä—á–∞ –∞–∫—Ç–∏–≤ —Å—û—Ä–æ–≤–Ω–æ–º–∞–ª–∞—Ä –π—û“õ.',
            'uz_latn': "Hozircha aktiv so'rovnomalar yo'q.",
            'ru': '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.'
        },
        'poll_reward': {
            'uz_cyrl': 'üí∞ –ú—É–∫–æ—Ñ–æ—Ç: {reward} —Å—û–º',
            'uz_latn': "üí∞ Mukofot: {reward} so'm",
            'ru': 'üí∞ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: {reward} —Å—É–º'
        },
        'start_poll': {
            'uz_cyrl': '‚ñ∂Ô∏è –ë–æ—à–ª–∞—à',
            'uz_latn': "‚ñ∂Ô∏è Boshlash",
            'ru': '‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å'
        },
        'completed_polls_title': {
            'uz_cyrl': '‚úÖ –°–∏–∑ —è–∫—É–Ω–ª–∞–≥–∞–Ω —Å—û—Ä–æ–≤–Ω–æ–º–∞–ª–∞—Ä:\n\n',
            'uz_latn': "‚úÖ Siz yakunlagan so'rovnomalar:\n\n",
            'ru': '‚úÖ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø—Ä–æ—Å—ã:\n\n'
        },
        'no_completed_polls': {
            'uz_cyrl': '–°–∏–∑ “≥–∞–ª–∏ “≥–µ—á –±–∏—Ä —Å—û—Ä–æ–≤–Ω–æ–º–∞–Ω–∏ —è–∫—É–Ω–ª–∞–º–∞–≥–∞–Ω—Å–∏–∑.',
            'uz_latn': "Siz hali hech bir so'rovnomani yakunlamagansiz.",
            'ru': '–í—ã –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞.'
        },
        'earned': {
            'uz_cyrl': '‚úÖ –ò—à–ª–∞–± —Ç–æ–ø–∏–ª–¥–∏: {amount} —Å—û–º',
            'uz_latn': "‚úÖ Ishlab topildi: {amount} so'm",
            'ru': '‚úÖ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {amount} —Å—É–º'
        },
        'withdrawal_history_title': {
            'uz_cyrl': 'üìú –ß–∏“õ–∞—Ä–∏—à —Ç–∞—Ä–∏—Ö–∏:\n\n',
            'uz_latn': "üìú Chiqarish tarixi:\n\n",
            'ru': 'üìú –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤:\n\n'
        },
        'no_withdrawal_history': {
            'uz_cyrl': '–°–∏–∑–¥–∞ “≥–∞–ª–∏ —á–∏“õ–∞—Ä–∏—à —Ç–∞—Ä–∏—Ö–∏ –π—û“õ.',
            'uz_latn': "Sizda hali chiqarish tarixi yo'q.",
            'ru': '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–æ–≤.'
        },
        'withdrawal_status': {
            'uz_cyrl': {
                'pending': '‚è≥ –ö—É—Ç–∏–ª–º–æ“õ–¥–∞',
                'approved': '‚úÖ –¢–∞—Å–¥–∏“õ–ª–∞–Ω–¥–∏',
                'rejected': '‚ùå –†–∞–¥ —ç—Ç–∏–ª–¥–∏',
                'completed': '‚úÖ –ë–∞–∂–∞—Ä–∏–ª–¥–∏'
            },
            'uz_latn': {
                'pending': "‚è≥ Kutilmoqda",
                'approved': "‚úÖ Tasdiqlandi",
                'rejected': "‚ùå Rad etildi",
                'completed': "‚úÖ Bajarildi"
            },
            'ru': {
                'pending': '‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏',
                'approved': '‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ',
                'rejected': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ',
                'completed': '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ'
            }
        },
        'enter_amount': {
            'uz_cyrl': 'üí≥ –ß–∏“õ–∞—Ä–∏—à —É—á—É–Ω —Å—É–º–º–∞–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ (–º–∏–Ω–∏–º—É–º 10000 —Å—û–º):',
            'uz_latn': "üí≥ Chiqarish uchun summani kiriting (minimum 10000 so'm):",
            'ru': 'üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–º–∏–Ω–∏–º—É–º 10000 —Å—É–º):'
        },
        'enter_payment_details': {
            'uz_cyrl': 'üí≥ –¢—û–ª–æ–≤ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ (–∫–∞—Ä—Ç–∞ —Ä–∞“õ–∞–º–∏ —ë–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω):',
            'uz_latn': "üí≥ To'lov ma'lumotlarini kiriting (karta raqami yoki telefon):",
            'ru': 'üí≥ –í–≤–µ–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω):'
        },
        'withdrawal_created': {
            'uz_cyrl': '‚úÖ –ß–∏“õ–∞—Ä–∏—à —Å—û—Ä–æ–≤–∏ —è—Ä–∞—Ç–∏–ª–¥–∏!\n\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫—û—Ä–∏–± —á–∏“õ–∏—à–∏–Ω–∏ –∫—É—Ç–∏–Ω–≥.',
            'uz_latn': "‚úÖ Chiqarish so'rovi yaratildi!\n\nAdministrator ko'rib chiqishini kuting.",
            'ru': '‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω!\n\n–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.'
        },
        'insufficient_balance': {
            'uz_cyrl': '‚ùå –ë–∞–ª–∞–Ω—Å–∏–Ω–≥–∏–∑–¥–∞ –µ—Ç–∞—Ä–ª–∏ –º–∞–±–ª–∞“ì –π—û“õ.',
            'uz_latn': "‚ùå Balansingizda yetarli mablag' yo'q.",
            'ru': '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.'
        },
        'invalid_amount': {
            'uz_cyrl': '‚ùå –ù–æ—Ç—û“ì—Ä–∏ —Å—É–º–º–∞. –ò–ª—Ç–∏–º–æ—Å, —Ä–∞“õ–∞–º –∫–∏—Ä–∏—Ç–∏–Ω–≥.',
            'uz_latn': "‚ùå Noto'g'ri summa. Iltimos, raqam kiriting.",
            'ru': '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.'
        },
        'minimum_amount': {
            'uz_cyrl': '‚ùå –ú–∏–Ω–∏–º–∞–ª —á–∏“õ–∞—Ä–∏—à —Å—É–º–º–∞—Å–∏ 10000 —Å—û–º.',
            'uz_latn': "‚ùå Minimal chiqarish summasi 10000 so'm.",
            'ru': '‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 10000 —Å—É–º.'
        },
        'cancel': {
            'uz_cyrl': '‚ùå –ë–µ–∫–æ—Ä “õ–∏–ª–∏—à',
            'uz_latn': "‚ùå Bekor qilish",
            'ru': '‚ùå –û—Ç–º–µ–Ω–∞'
        },
        'cancelled': {
            'uz_cyrl': '‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–¥–∏.',
            'uz_latn': "‚ùå Operatsiya bekor qilindi.",
            'ru': '‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.'
        }
    }
    
    text_dict = texts.get(key, {})
    return text_dict.get(lang, text_dict.get('uz_cyrl', ''))


@menu_router.message(Command("menu"))
async def show_menu(message: Message, user: TGUser | None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if not user:
        return
    
    await message.answer(
        "–ú–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard(user.lang)
    )


@menu_router.message(lambda message: message.text and any(x in message.text for x in ['üí∞ –ë–∞–ª–∞–Ω—Å', 'üí∞ Balans']))
async def show_balance(message: Message, user: TGUser | None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not user:
        return
    
    await message.bot.send_chat_action(message.from_user.id, action=ChatAction.TYPING)
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    balance = user.balance
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = get_text('balance_info', user.lang).format(balance=balance)
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–µ–Ω–µ–≥
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=get_text('withdraw_button', user.lang),
            callback_data='withdraw_money'
        )]
    ])
    
    await message.answer(text, reply_markup=keyboard)


@menu_router.callback_query(lambda c: c.data == 'withdraw_money')
async def initiate_withdrawal(callback: CallbackQuery, state: FSMContext, user: TGUser | None):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤"""
    if not user:
        return
    
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    if user.balance < 10000:
        await callback.message.answer(
            get_text('insufficient_balance', user.lang)
        )
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É
    await callback.message.answer(
        get_text('enter_amount', user.lang)
    )
    await state.set_state(WithdrawalStates.waiting_for_amount)


@menu_router.message(WithdrawalStates.waiting_for_amount)
async def process_withdrawal_amount(message: Message, state: FSMContext, user: TGUser | None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    if not user:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–º–µ–Ω—É
    if message.text and any(x in message.text for x in ['‚ùå –ë–µ–∫–æ—Ä “õ–∏–ª–∏—à', "‚ùå Bekor qilish", '‚ùå –û—Ç–º–µ–Ω–∞']):
        await state.clear()
        await message.answer(
            get_text('cancelled', user.lang),
            reply_markup=get_main_menu_keyboard(user.lang)
        )
        return
    
    try:
        amount = Decimal(message.text.strip())
    except:
        await message.answer(get_text('invalid_amount', user.lang))
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
    if amount < 10000:
        await message.answer(get_text('minimum_amount', user.lang))
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–∞
    if amount > user.balance:
        await message.answer(get_text('insufficient_balance', user.lang))
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(amount=amount)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await message.answer(get_text('enter_payment_details', user.lang))
    await state.set_state(WithdrawalStates.waiting_for_payment_details)


@menu_router.message(WithdrawalStates.waiting_for_payment_details)
async def process_payment_details(message: Message, state: FSMContext, user: TGUser | None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if not user:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–º–µ–Ω—É
    if message.text and any(x in message.text for x in ['‚ùå –ë–µ–∫–æ—Ä “õ–∏–ª–∏—à', "‚ùå Bekor qilish", '‚ùå –û—Ç–º–µ–Ω–∞']):
        await state.clear()
        await message.answer(
            get_text('cancelled', user.lang),
            reply_markup=get_main_menu_keyboard(user.lang)
        )
        return
    
    payment_details = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    amount = data.get('amount')
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥
    withdrawal = await sync_to_async(WithdrawalRequest.objects.create)(
        user=user,
        amount=amount,
        payment_details=payment_details,
        status='pending'
    )
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å –±–∞–ª–∞–Ω—Å–∞ (—Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º)
    user.balance -= amount
    await sync_to_async(user.save)()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(
        get_text('withdrawal_created', user.lang),
        reply_markup=get_main_menu_keyboard(user.lang)
    )


@menu_router.message(lambda message: message.text and any(x in message.text for x in ['üåê –¢–∏–ª–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à', "üåê Tilni o'zgartirish", 'üåê –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫']))
async def change_language(message: Message, user: TGUser | None):
    """–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"""
    if not user:
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–é–∑–±–µ–∫—á–∞ (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞)', callback_data='lang_uz_cyrl')],
        [InlineKeyboardButton(text="O'zbekcha (lotin)", callback_data='lang_uz_latn')],
        [InlineKeyboardButton(text='–†—É—Å—Å–∫–∏–π', callback_data='lang_ru')]
    ])
    
    await message.answer(
        get_text('language_select', user.lang),
        reply_markup=keyboard
    )


@menu_router.callback_query(lambda c: c.data.startswith('lang_'))
async def process_language_change(callback: CallbackQuery, user: TGUser | None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞"""
    if not user:
        return
    
    lang = callback.data.replace('lang_', '')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.lang = lang
    await sync_to_async(user.save)()
    
    await callback.answer()
    await callback.message.edit_text(get_text('language_changed', lang))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
    await callback.message.answer(
        "–ú–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard(lang)
    )


@menu_router.message(lambda message: message.text and any(x in message.text for x in ['üìä –ê–∫—Ç–∏–≤ —Å—û—Ä–æ–≤–Ω–æ–º–∞–ª–∞—Ä', "üìä Aktiv so'rovnomalar", 'üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã']))
async def show_active_polls(message: Message, user: TGUser | None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã"""
    if not user:
        return
    
    await message.bot.send_chat_action(message.from_user.id, action=ChatAction.TYPING)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã
    active_polls = await sync_to_async(list)(
        Poll.objects.filter(deadline__gte=timezone.now())
    )
    
    if not active_polls:
        await message.answer(get_text('no_active_polls', user.lang))
        return
    
    text = get_text('active_polls_title', user.lang)
    
    keyboard_buttons = []
    for poll in active_polls:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –æ–ø—Ä–æ—Å
        completed = await sync_to_async(
            Respondent.objects.filter(
                tg_user=user,
                poll=poll,
                finished_at__isnull=False
            ).exists
        )()
        
        status = '‚úÖ ' if completed else '‚ñ∂Ô∏è '
        poll_text = f"{status}{poll.name}\n"
        poll_text += get_text('poll_reward', user.lang).format(reward=poll.reward)
        
        text += f"\n{poll_text}\n"
        
        if not completed:
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"{poll.name}",
                    callback_data=f"start_poll:{poll.uuid}"
                )
            ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons) if keyboard_buttons else None
    
    await message.answer(text, reply_markup=keyboard)


@menu_router.callback_query(lambda c: c.data.startswith('start_poll:'))
async def start_poll_from_menu(callback: CallbackQuery, state: FSMContext, user: TGUser | None):
    """–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å –∏–∑ –º–µ–Ω—é"""
    if not user:
        return
    
    from apps.bot.utils import get_current_question
    
    poll_uuid = callback.data.replace('start_poll:', '')
    
    await callback.answer()
    await callback.message.delete()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å
    await get_current_question(callback.bot, callback.from_user.id, state, user, poll_uuid=poll_uuid)


@menu_router.message(lambda message: message.text and any(x in message.text for x in ['‚úÖ –Ø–∫—É–Ω–ª–∞–Ω–≥–∞–Ω —Å—û—Ä–æ–≤–Ω–æ–º–∞–ª–∞—Ä', "‚úÖ Yakunlangan so'rovnomalar", '‚úÖ –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å—ã']))
async def show_completed_polls(message: Message, user: TGUser | None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å—ã"""
    if not user:
        return
    
    await message.bot.send_chat_action(message.from_user.id, action=ChatAction.TYPING)
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    completed_respondents = await sync_to_async(list)(
        Respondent.objects.filter(
            tg_user=user,
            finished_at__isnull=False
        ).select_related('poll').order_by('-finished_at')
    )
    
    if not completed_respondents:
        await message.answer(get_text('no_completed_polls', user.lang))
        return
    
    text = get_text('completed_polls_title', user.lang)
    
    for resp in completed_respondents:
        poll = resp.poll
        finished_date = resp.finished_at.strftime('%d.%m.%Y %H:%M')
        text += f"\nüìä {poll.name}\n"
        text += f"üìÖ {finished_date}\n"
        if poll.reward > 0:
            text += get_text('earned', user.lang).format(amount=poll.reward) + "\n"
    
    await message.answer(text)


@menu_router.message(lambda message: message.text and any(x in message.text for x in ['üìú –ß–∏“õ–∞—Ä–∏—à —Ç–∞—Ä–∏—Ö–∏', "üìú Chiqarish tarixi", 'üìú –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤']))
async def show_withdrawal_history(message: Message, user: TGUser | None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–æ–≤"""
    if not user:
        return
    
    await message.bot.send_chat_action(message.from_user.id, action=ChatAction.TYPING)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–æ–≤
    withdrawals = await sync_to_async(list)(
        WithdrawalRequest.objects.filter(user=user).order_by('-created_at')
    )
    
    if not withdrawals:
        await message.answer(get_text('no_withdrawal_history', user.lang))
        return
    
    text = get_text('withdrawal_history_title', user.lang)
    
    status_texts = get_text('withdrawal_status', user.lang)
    
    for withdrawal in withdrawals:
        created_date = withdrawal.created_at.strftime('%d.%m.%Y %H:%M')
        status = status_texts.get(withdrawal.status, withdrawal.status)
        
        text += f"\nüí≥ {withdrawal.amount} —Å—û–º\n"
        text += f"üìÖ {created_date}\n"
        text += f"{status}\n"
    
    await message.answer(text)

