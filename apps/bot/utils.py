import re

from aiogram import Bot
from aiogram.fsm.context import FSMContext
from asgiref.sync import sync_to_async
from django.db import IntegrityError
from django.db.models import OuterRef, Exists
from django.utils import timezone
from django.utils.translation import gettext_lazy as _

from apps.bot.states import PollStates
from apps.polls.models import Poll, Respondent, Answer, Question
from apps.users.models import TGUser

ANOTHER_STR = str(_("–ë–æ—à“õ–∞(—ë–∑–∏–Ω–≥)__________"))
BACK_STR = str(_("üîô –û—Ä—Ç–≥–∞"))
NEXT_STR = str(_("‚û°Ô∏è –ö–µ–π–∏–Ω–≥–∏ —Å–∞–≤–æ–ª"))


def escape_markdown_v2(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2.
    """
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)


async def poll_checker(bot, chat_id, question, options):
    if len(question.text) > 255:
        await bot.send_message(
            chat_id=chat_id,
            text=question.text + "\n\n" + str(_("–°–∞–≤–æ–ª –º–∞—Ç–Ω–∏ –∂—É–¥–∞ —É–∑—É–Ω. –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥."))
        )
        return

    if len(options) > 10:
        await bot.send_message(
            chat_id=chat_id,
            text=question.text + "\n\n" + str(_("–£—à–±—É —Å–∞–≤–æ–ª –∂–∞–≤–æ–±–∏ 10 —Ç–∞ –∂–∞–≤–æ–±–¥–∞–Ω –∫–æ–ø! –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ–≥–ª–∞–Ω–∏–Ω–≥"))
        )
        return

    for opt in options:
        if len(opt) > 100:
            await bot.send_message(
                chat_id=chat_id,
                text=(
                    question.text + "\n\n" + opt + "\n\n" + str(_(
                    "–ñ–∞–≤–æ–± –≤–∞—Ä–∏–∞–Ω—Ç–ª–∞—Ä–∏–¥–∞–Ω –±–∏—Ä–∏ 100 –±–µ–ª–≥–∏–¥–∞–Ω —É–∑—É–Ω. –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥."
                ))
                )
            )
            return
    return True


async def send_poll_question(bot: Bot, chat_id: int, state: FSMContext, respondent: Respondent, question: Question):
    choices = await sync_to_async(list)(question.choices.all().order_by("order"))
    allows_multiple_answers = question.type in (
        Question.QuestionTypeChoices.CLOSED_MULTIPLE,
        Question.QuestionTypeChoices.MIXED_MULTIPLE
    )

    # üí¨ –û—Ç–∫—Ä—ã—Ç—ã–π –∏–ª–∏ —Å–º–µ—à–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–∫—Å—Ç
    if question.type == Question.QuestionTypeChoices.OPEN:
        await bot.send_message(
            chat_id,
            f"üì® {question.text}\n\n–ò–ª—Ç–∏–º–æ—Å, –∂–∞–≤–æ–±–∏–Ω–≥–∏–∑–Ω–∏ –º–∞—Ç–Ω —Å–∏—Ñ–∞—Ç–∏–¥–∞ —é–±–æ—Ä–∏–Ω–≥ ‚úçÔ∏è"
        )

        # –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π Answer –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        answer = await Answer.objects.filter(
            respondent=respondent,
            question=question
        ).select_related("respondent", "question").afirst()
        if not answer:
            answer = await Answer.objects.acreate(
                respondent=respondent,
                question=question
            )
        await state.set_state(PollStates.waiting_for_answer)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM, —á—Ç–æ–±—ã –∂–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        await state.update_data(
            question_id=question.id,
            respondent_id=respondent.id,
            answer_id=answer.id
        )
        return

    # üìä –ó–∞–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º Telegram poll
    options = [choice.text for choice in choices]
    if question.type in [
        Question.QuestionTypeChoices.MIXED,
        Question.QuestionTypeChoices.MIXED_MULTIPLE
    ]:
        options.append(ANOTHER_STR)

    if await poll_checker(bot, chat_id, question, options) is True:
        poll_message = await bot.send_poll(
            chat_id=chat_id,
            question=question.text,
            options=options,
            is_anonymous=False,
            allows_multiple_answers=allows_multiple_answers,
            protect_content=True
        )

        # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º Answer —Å telegram_poll_id
        answer, created = await Answer.objects.aupdate_or_create(
            respondent=respondent,
            question=question,
            defaults={"telegram_poll_id": poll_message.poll.id,
                      "telegram_msg_id": poll_message.message_id,
                      "telegram_chat_id": poll_message.chat.id
                      }
        )
        await sync_to_async(lambda: answer.question)()
        await sync_to_async(lambda: answer.respondent)()

    await state.clear()


async def async_get_or_create_user(defaults=None, **kwargs):
    """
    Async equivalent of Django's get_or_create.
    """
    defaults = defaults or {}
    try:
        # Try to get the object
        obj = await TGUser.objects.aget(**kwargs)
        created = False
    except TGUser.DoesNotExist:
        # Object does not exist, attempt to create it
        try:
            obj = await TGUser.objects.acreate(**{**kwargs, **defaults})
            created = True
        except IntegrityError:
            # Handle a race condition where the object was created between `aget` and `acreate`
            obj = await TGUser.objects.aget(**kwargs)
            created = False
    return obj, created


async def get_next_question(bot, chat_id, state: FSMContext, respondent, previous_questions, question_id):
    all_questions = await sync_to_async(lambda: respondent.poll.questions.order_by("order"))()
    answered_ids = await sync_to_async(list)(
        Answer.objects.filter(respondent=respondent).values_list('question_id', flat=True)
    )
    next_question = await all_questions.exclude(id__in=answered_ids).afirst()

    if not next_question:
        respondent.finished_at = timezone.now()
        await respondent.asave()
        await bot.send_message(
            chat_id,
            str(_(
                "–°–∏–∑ —Å—û—Ä–æ–≤–Ω–æ–º–∞–Ω–∏ —Ç—û–ª–∏“õ —è–∫—É–Ω–ª–∞–¥–∏–Ω–≥–∏–∑. –†–∞“≥–º–∞—Ç!\n\n"
                "–°–∏–∑–Ω–∏–Ω–≥ —Ñ–∏–∫—Ä–∏–Ω–≥–∏–∑ –±–∏–∑ —É—á—É–Ω –∂—É–¥–∞ –º—É“≥–∏–º.\n"
                "–ò—à—Ç–∏—Ä–æ–∫–∏–Ω–≥–∏–∑ –æ—Ä“õ–∞–ª–∏ –º—É“≥–∏–º –∏—Å–ª–æ“≥–æ—Ç–ª–∞—Ä –≤–∞ “õ–∞—Ä–æ—Ä–ª–∞—Ä —à–∞–∫–ª–ª–∞–Ω—Ç–∏—Ä–∏–ª–∞–¥–∏.\n"
                "–Ø–Ω–≥–∏ —Å—û—Ä–æ–≤–ª–∞—Ä–¥–∞ “≥–∞–º —Ñ–∞–æ–ª –∏—à—Ç–∏—Ä–æ–∫ —ç—Ç–∏—à–∏–Ω–≥–∏–∑–Ω–∏ –∫—É—Ç–∞–º–∏–∑!"
            ))
        )
        await state.clear()
        return

    if not respondent.history:
        await bot.send_message(
            chat_id,
            str(respondent.poll.description),
            parse_mode="Markdown"
        )

    updated_history = previous_questions + [question_id]
    respondent.history = updated_history
    await respondent.asave()

    await state.update_data(
        question_id=next_question.id,
        previous_questions=updated_history
    )
    await send_poll_question(bot, chat_id, state, respondent, next_question)


async def get_current_question(bot, chat_id, state: FSMContext, user, poll_uuid=None):
    active_polls = Poll.objects.filter(deadline__gte=timezone.now())
    if not await active_polls.aexists():
        await bot.send_message(chat_id, str(_("“≤–æ–∑–∏—Ä—á–∞ –∞–∫—Ç–∏–≤ —Å—û—Ä–æ–≤–Ω–æ–º–∞–ª–∞—Ä –º–∞–≤–∂—É–¥ —ç–º–∞—Å.")))
        return

    if poll_uuid:
        poll = await Poll.objects.filter(uuid=poll_uuid, deadline__gte=timezone.now()).afirst()
        if not poll:
            await bot.send_message(chat_id, str(_("–ö–µ—á–∏—Ä–∞—Å–∏–∑, —É—à–±—É —Å—û—Ä–æ–≤–Ω–æ–º–∞ —Ç–æ–ø–∏–ª–º–∞–¥–∏ —ë–∫–∏ –º—É–¥–¥–∞—Ç–∏ —Ç—É–≥–∞–≥–∞–Ω.")))
            return
        available_polls = [poll]
    else:
        completed_respondents = Respondent.objects.filter(
            tg_user=user,
            poll=OuterRef('pk'),
            finished_at__isnull=False
        )
        available_polls = active_polls.annotate(
            has_completed=Exists(completed_respondents)
        ).filter(has_completed=False)

    if isinstance(available_polls, list):
        poll = available_polls[0]
    else:
        if not await available_polls.aexists():
            await bot.send_message(chat_id, str(_("“≤–æ–∑–∏—Ä—á–∞ —Å–∏–∑ —É—á—É–Ω —è–Ω–≥–∏ —Å—û—Ä–æ–≤–Ω–æ–º–∞–ª–∞—Ä –º–∞–≤–∂—É–¥ —ç–º–∞—Å.")))
            return
        poll = await available_polls.afirst()

    respondent = await Respondent.objects.filter(
        tg_user=user, poll=poll, finished_at__isnull=True
    ).afirst()

    if not respondent:
        respondent = await Respondent.objects.acreate(tg_user=user, poll=poll)

    unfinished_answer = await Answer.objects.filter(
        respondent=respondent,
        is_answered=False,
        telegram_msg_id__isnull=False
    ).select_related("question", "question__poll").order_by("id").afirst()

    if unfinished_answer:
        await state.update_data(respondent_id=respondent.id)
        await send_poll_question(
            bot, chat_id, state, respondent, unfinished_answer.question
        )
        return

    # ‚ûï –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    questions = await sync_to_async(lambda: poll.questions.order_by("order"))()
    answered_ids = await sync_to_async(list)(
        Answer.objects.filter(respondent=respondent).values_list('question_id', flat=True)
    )
    next_question = await questions.exclude(id__in=answered_ids).afirst()

    if not next_question:
        respondent.finished_at = timezone.now()
        await respondent.asave()
        await bot.send_message(chat_id, str(_("–°–∏–∑ —Å—û—Ä–æ–≤–Ω–æ–º–∞–Ω–∏ —Ç—û–ª–∏“õ —è–∫—É–Ω–ª–∞–¥–∏–Ω–≥–∏–∑. –†–∞—Ö–º–∞—Ç!")))
        return

    # ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await state.update_data(respondent_id=respondent.id)
    await get_next_question(bot, chat_id, state, respondent, respondent.history, next_question.id)


async def send_confirmation_text(bot, answer):
    # ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ + % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    total_questions = await sync_to_async(lambda: answer.respondent.poll.questions.count())()
    answered_count = await sync_to_async(
        lambda: Answer.objects.filter(respondent=answer.respondent, is_answered=True).count())()
    progress = int((answered_count / total_questions) * 100)
    # üßæ –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ (–æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ)
    if answer.question.type in (
            Question.QuestionTypeChoices.CLOSED_MULTIPLE,
            Question.QuestionTypeChoices.MIXED_MULTIPLE
    ):
        selected_choices = await sync_to_async(list)(answer.selected_choices.all())
        selected_text = "\n".join([f"‚Ä¢ {choice.text}" for choice in selected_choices])
    else:
        selected_choices = await sync_to_async(list)(answer.selected_choices.all())
        selected_text = ""
        if answer.open_answer:
            selected_text += f"‚Ä¢ {answer.open_answer}\n"
        if selected_choices:
            selected_text += f"‚Ä¢ {selected_choices[0].text}"



    def render_progress_bar(progress: int, total_blocks: int = 10) -> str:
        filled_blocks = int((progress / 100) * total_blocks)
        empty_blocks = total_blocks - filled_blocks
        return "‚ñà" * filled_blocks + "‚ñë" * empty_blocks  # –∏–ª–∏ ‚ñì –∏ ‚ñë –¥–ª—è –±–æ–ª–µ–µ –º—è–≥–∫–æ–≥–æ —Å—Ç–∏–ª—è

    progress_bar = render_progress_bar(progress)

    # üí¨ –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmation_text = (
        f"<b>{answer.question.text}</b>\n\n"
        f"‚úÖ –°–∏–∑ —Ç–∞–Ω–ª–∞–≥–∞–Ω –∂–∞–≤–æ–±(–ª–∞—Ä):\n{selected_text}\n\n"
        f"{progress_bar} <b>{progress}%</b>"
    )

    await bot.send_message(
        chat_id=answer.telegram_chat_id,
        text=confirmation_text,
        parse_mode="HTML"
    )

    try:
        await bot.delete_message(chat_id=answer.telegram_chat_id, message_id=answer.telegram_msg_id)
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å poll: {e}")
