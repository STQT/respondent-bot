import re

from aiogram import Bot
from aiogram.fsm.context import FSMContext
from asgiref.sync import sync_to_async
from django.db import IntegrityError
from django.db.models import OuterRef, Exists
from django.utils import timezone
from django.utils.translation import gettext_lazy as _

from apps.bot.states import PollStates
from apps.polls.models import Poll, Respondent, Answer, Question
from apps.users.models import TGUser

ANOTHER_STR = str(_("–ë–æ—à“õ–∞(—ë–∑–∏–Ω–≥)__________"))
BACK_STR = str(_("üîô –û—Ä—Ç–≥–∞"))
NEXT_STR = str(_("‚û°Ô∏è –ö–µ–π–∏–Ω–≥–∏ —Å–∞–≤–æ–ª"))


def escape_markdown_v2(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2.
    """
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)


async def poll_checker(bot, chat_id, question, options):
    if len(question.text) > 255:
        await bot.send_message(
            chat_id=chat_id,
            text=question.text + "\n\n" + str(_("–°–∞–≤–æ–ª –º–∞—Ç–Ω–∏ –∂—É–¥–∞ —É–∑—É–Ω. –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥."))
        )
        return

    if len(options) > 10:
        await bot.send_message(
            chat_id=chat_id,
            text=question.text + "\n\n" + str(_("–£—à–±—É —Å–∞–≤–æ–ª –∂–∞–≤–æ–±–∏ 10 —Ç–∞ –∂–∞–≤–æ–±–¥–∞–Ω –∫–æ–ø! –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ–≥–ª–∞–Ω–∏–Ω–≥"))
        )
        return

    for opt in options:
        if len(opt) > 100:
            await bot.send_message(
                chat_id=chat_id,
                text=(
                    question.text + "\n\n" + opt + "\n\n" + str(_(
                    "–ñ–∞–≤–æ–± –≤–∞—Ä–∏–∞–Ω—Ç–ª–∞—Ä–∏–¥–∞–Ω –±–∏—Ä–∏ 100 –±–µ–ª–≥–∏–¥–∞–Ω —É–∑—É–Ω. –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥."
                ))
                )
            )
            return
    return True


async def send_poll_question(bot: Bot, chat_id: int, state: FSMContext, respondent: Respondent, question: Question):
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await sync_to_async(lambda: respondent.tg_user)()
    user_lang = user.lang if hasattr(user, 'lang') else 'uz_cyrl'
    
    choices = await sync_to_async(list)(question.choices.all().order_by("order"))
    allows_multiple_answers = question.type in (
        Question.QuestionTypeChoices.CLOSED_MULTIPLE,
        Question.QuestionTypeChoices.MIXED_MULTIPLE
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    question_text = await sync_to_async(question.get_text)(user_lang)

    # üí¨ –û—Ç–∫—Ä—ã—Ç—ã–π –∏–ª–∏ —Å–º–µ—à–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–∫—Å—Ç
    if question.type == Question.QuestionTypeChoices.OPEN:
        prompt_texts = {
            'uz_cyrl': f"üì® {question_text}\n\n–ò–ª—Ç–∏–º–æ—Å, –∂–∞–≤–æ–±–∏–Ω–≥–∏–∑–Ω–∏ –º–∞—Ç–Ω —Å–∏—Ñ–∞—Ç–∏–¥–∞ —é–±–æ—Ä–∏–Ω–≥ ‚úçÔ∏è",
            'uz_latn': f"üì® {question_text}\n\nIltimos, javobingizni matn sifatida yuboring ‚úçÔ∏è",
            'ru': f"üì® {question_text}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º ‚úçÔ∏è"
        }
        prompt = prompt_texts.get(user_lang, prompt_texts['uz_cyrl'])
        
        await bot.send_message(chat_id, prompt)

        # –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π Answer –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        answer = await Answer.objects.filter(
            respondent=respondent,
            question=question
        ).select_related("respondent", "question").afirst()
        if not answer:
            answer = await Answer.objects.acreate(
                respondent=respondent,
                question=question
            )
        await state.set_state(PollStates.waiting_for_answer)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM, —á—Ç–æ–±—ã –∂–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        await state.update_data(
            question_id=question.id,
            respondent_id=respondent.id,
            answer_id=answer.id
        )
        return

    # üìä –ó–∞–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º Telegram poll
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç—ã –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    options = []
    for choice in choices:
        choice_text = await sync_to_async(choice.get_text)(user_lang)
        options.append(choice_text)
    
    if question.type in [
        Question.QuestionTypeChoices.MIXED,
        Question.QuestionTypeChoices.MIXED_MULTIPLE
    ]:
        # –¢–µ–∫—Å—Ç "–ë–æ—à“õ–∞" –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
        another_texts = {
            'uz_cyrl': str(_("–ë–æ—à“õ–∞(—ë–∑–∏–Ω–≥)__________")),
            'uz_latn': "Boshqa (yozing)__________",
            'ru': "–î—Ä—É–≥–æ–µ (–Ω–∞–ø–∏—à–∏—Ç–µ)__________"
        }
        options.append(another_texts.get(user_lang, str(ANOTHER_STR)))

    if await poll_checker(bot, chat_id, question, options) is True:
        poll_message = await bot.send_poll(
            chat_id=chat_id,
            question=question_text,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
            options=options,
            is_anonymous=False,
            allows_multiple_answers=allows_multiple_answers,
            protect_content=True
        )

        # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º Answer —Å telegram_poll_id
        answer, created = await Answer.objects.aupdate_or_create(
            respondent=respondent,
            question=question,
            defaults={"telegram_poll_id": poll_message.poll.id,
                      "telegram_msg_id": poll_message.message_id,
                      "telegram_chat_id": poll_message.chat.id
                      }
        )
        await sync_to_async(lambda: answer.question)()
        await sync_to_async(lambda: answer.respondent)()

    await state.clear()


async def async_get_or_create_user(defaults=None, **kwargs):
    """
    Async equivalent of Django's get_or_create.
    """
    defaults = defaults or {}
    try:
        # Try to get the object
        obj = await TGUser.objects.aget(**kwargs)
        created = False
    except TGUser.DoesNotExist:
        # Object does not exist, attempt to create it
        try:
            obj = await TGUser.objects.acreate(**{**kwargs, **defaults})
            created = True
        except IntegrityError:
            # Handle a race condition where the object was created between `aget` and `acreate`
            obj = await TGUser.objects.aget(**kwargs)
            created = False
    return obj, created


async def get_next_question(bot, chat_id, state: FSMContext, respondent, previous_questions, question_id):
    from apps.bot.captcha_utils import should_show_captcha, generate_math_captcha, generate_text_captcha
    from apps.polls.models import CaptchaChallenge, Answer
    from datetime import timedelta
    import random
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∫–∞–ø—á–∞
    answered_count = await sync_to_async(
        Answer.objects.filter(respondent=respondent, is_answered=True).count
    )()
    
    user = await sync_to_async(lambda: respondent.tg_user)()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∫–∞–ø—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ –Ω–µ–¥–∞–≤–Ω–æ (–≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥)
    recent_captcha = await sync_to_async(
        CaptchaChallenge.objects.filter(
            respondent=respondent,
            created_at__gte=timezone.now() - timedelta(seconds=30)
        ).exists
    )()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ø—á—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
    # 1. –ù–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è (–ø–æ answered_count)
    # 2. –ò –Ω–µ –±—ã–ª–æ –∫–∞–ø—á–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
    if should_show_captcha(answered_count) and not recent_captcha:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–ø—á—É
        captcha_type = random.choice(['math', 'text'])
        
        if captcha_type == 'math':
            question_text, correct_answer = generate_math_captcha(user.lang)
        else:
            question_text, correct_answer = generate_text_captcha(user.lang)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–ø—á—É –≤ –±–∞–∑—É
        captcha = await sync_to_async(CaptchaChallenge.objects.create)(
            respondent=respondent,
            captcha_type=captcha_type,
            question=question_text,
            correct_answer=correct_answer
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ø—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(chat_id, question_text, parse_mode="HTML")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞–ø—á–∏
        await state.set_state(PollStates.waiting_for_captcha)
        await state.update_data(
            captcha_id=captcha.id,
            respondent_id=respondent.id,
            previous_questions=previous_questions,
            question_id=question_id
        )
        return
    
    all_questions = await sync_to_async(lambda: respondent.poll.questions.order_by("order"))()
    answered_ids = await sync_to_async(list)(
        Answer.objects.filter(respondent=respondent).values_list('question_id', flat=True)
    )
    next_question = await all_questions.exclude(id__in=answered_ids).afirst()

    if not next_question:
        respondent.finished_at = timezone.now()
        await respondent.asave()
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
        poll = await sync_to_async(lambda: respondent.poll)()
        user = await sync_to_async(lambda: respondent.tg_user)()
        
        if poll.reward > 0:
            # –ù–∞—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å
            user.balance += poll.reward
            await sync_to_async(user.save)()
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            from apps.users.models import TransactionHistory
            await sync_to_async(TransactionHistory.objects.create)(
                user=user,
                transaction_type='earned',
                amount=poll.reward,
                description=f'–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ "{poll.name}"',
                related_poll=poll
            )
            
            completion_message = str(_(
                "–°–∏–∑ —Å—û—Ä–æ–≤–Ω–æ–º–∞–Ω–∏ —Ç—û–ª–∏“õ —è–∫—É–Ω–ª–∞–¥–∏–Ω–≥–∏–∑. –†–∞“≥–º–∞—Ç!\n\n"
                "üí∞ –°–∏–∑–≥–∞ {reward} —Å—û–º “≥–∏—Å–æ–±–∏–Ω–≥–∏–∑–≥–∞ “õ—û—à–∏–ª–¥–∏!\n\n"
                "–°–∏–∑–Ω–∏–Ω–≥ —Ñ–∏–∫—Ä–∏–Ω–≥–∏–∑ –±–∏–∑ —É—á—É–Ω –∂—É–¥–∞ –º—É“≥–∏–º.\n"
                "–ò—à—Ç–∏—Ä–æ–∫–∏–Ω–≥–∏–∑ –æ—Ä“õ–∞–ª–∏ –º—É“≥–∏–º –∏—Å–ª–æ“≥–æ—Ç–ª–∞—Ä –≤–∞ “õ–∞—Ä–æ—Ä–ª–∞—Ä —à–∞–∫–ª–ª–∞–Ω—Ç–∏—Ä–∏–ª–∞–¥–∏.\n"
                "–Ø–Ω–≥–∏ —Å—û—Ä–æ–≤–ª–∞—Ä–¥–∞ “≥–∞–º —Ñ–∞–æ–ª –∏—à—Ç–∏—Ä–æ–∫ —ç—Ç–∏—à–∏–Ω–≥–∏–∑–Ω–∏ –∫—É—Ç–∞–º–∏–∑!"
            )).format(reward=poll.reward)
        else:
            completion_message = str(_(
                "–°–∏–∑ —Å—û—Ä–æ–≤–Ω–æ–º–∞–Ω–∏ —Ç—û–ª–∏“õ —è–∫—É–Ω–ª–∞–¥–∏–Ω–≥–∏–∑. –†–∞“≥–º–∞—Ç!\n\n"
                "–°–∏–∑–Ω–∏–Ω–≥ —Ñ–∏–∫—Ä–∏–Ω–≥–∏–∑ –±–∏–∑ —É—á—É–Ω –∂—É–¥–∞ –º—É“≥–∏–º.\n"
                "–ò—à—Ç–∏—Ä–æ–∫–∏–Ω–≥–∏–∑ –æ—Ä“õ–∞–ª–∏ –º—É“≥–∏–º –∏—Å–ª–æ“≥–æ—Ç–ª–∞—Ä –≤–∞ “õ–∞—Ä–æ—Ä–ª–∞—Ä —à–∞–∫–ª–ª–∞–Ω—Ç–∏—Ä–∏–ª–∞–¥–∏.\n"
                "–Ø–Ω–≥–∏ —Å—û—Ä–æ–≤–ª–∞—Ä–¥–∞ “≥–∞–º —Ñ–∞–æ–ª –∏—à—Ç–∏—Ä–æ–∫ —ç—Ç–∏—à–∏–Ω–≥–∏–∑–Ω–∏ –∫—É—Ç–∞–º–∏–∑!"
            ))
        
        await bot.send_message(chat_id, completion_message)
        await state.clear()
        return

    if not respondent.history:
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await sync_to_async(lambda: respondent.tg_user)()
        user_lang = user.lang if hasattr(user, 'lang') else 'uz_cyrl'
        poll = await sync_to_async(lambda: respondent.poll)()
        description = await sync_to_async(poll.get_description)(user_lang)
        
        await bot.send_message(
            chat_id,
            description,
            parse_mode="Markdown"
        )

    updated_history = previous_questions + [question_id]
    respondent.history = updated_history
    await respondent.asave()

    await state.update_data(
        question_id=next_question.id,
        previous_questions=updated_history
    )
    await send_poll_question(bot, chat_id, state, respondent, next_question)


async def get_current_question(bot, chat_id, state: FSMContext, user, poll_uuid=None):
    active_polls = Poll.objects.filter(deadline__gte=timezone.now())
    if not await active_polls.aexists():
        await bot.send_message(chat_id, str(_("“≤–æ–∑–∏—Ä—á–∞ –∞–∫—Ç–∏–≤ —Å—û—Ä–æ–≤–Ω–æ–º–∞–ª–∞—Ä –º–∞–≤–∂—É–¥ —ç–º–∞—Å.")))
        return

    if poll_uuid:
        poll = await Poll.objects.filter(uuid=poll_uuid, deadline__gte=timezone.now()).afirst()
        if not poll:
            await bot.send_message(chat_id, str(_("–ö–µ—á–∏—Ä–∞—Å–∏–∑, —É—à–±—É —Å—û—Ä–æ–≤–Ω–æ–º–∞ —Ç–æ–ø–∏–ª–º–∞–¥–∏ —ë–∫–∏ –º—É–¥–¥–∞—Ç–∏ —Ç—É–≥–∞–≥–∞–Ω.")))
            return
        available_polls = [poll]
    else:
        completed_respondents = Respondent.objects.filter(
            tg_user=user,
            poll=OuterRef('pk'),
            finished_at__isnull=False
        )
        available_polls = active_polls.annotate(
            has_completed=Exists(completed_respondents)
        ).filter(has_completed=False)

    if isinstance(available_polls, list):
        poll = available_polls[0]
    else:
        if not await available_polls.aexists():
            await bot.send_message(chat_id, str(_("“≤–æ–∑–∏—Ä—á–∞ —Å–∏–∑ —É—á—É–Ω —è–Ω–≥–∏ —Å—û—Ä–æ–≤–Ω–æ–º–∞–ª–∞—Ä –º–∞–≤–∂—É–¥ —ç–º–∞—Å.")))
            return
        poll = await available_polls.afirst()

    respondent = await Respondent.objects.filter(
        tg_user=user, poll=poll, finished_at__isnull=True
    ).afirst()

    if not respondent:
        respondent = await Respondent.objects.acreate(tg_user=user, poll=poll)

    unfinished_answer = await Answer.objects.filter(
        respondent=respondent,
        is_answered=False,
        telegram_msg_id__isnull=False
    ).select_related("question", "question__poll").order_by("id").afirst()

    if unfinished_answer:
        await state.update_data(respondent_id=respondent.id)
        await send_poll_question(
            bot, chat_id, state, respondent, unfinished_answer.question
        )
        return

    # ‚ûï –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    questions = await sync_to_async(lambda: poll.questions.order_by("order"))()
    answered_ids = await sync_to_async(list)(
        Answer.objects.filter(respondent=respondent).values_list('question_id', flat=True)
    )
    next_question = await questions.exclude(id__in=answered_ids).afirst()

    if not next_question:
        respondent.finished_at = timezone.now()
        await respondent.asave()
        await bot.send_message(chat_id, str(_("–°–∏–∑ —Å—û—Ä–æ–≤–Ω–æ–º–∞–Ω–∏ —Ç—û–ª–∏“õ —è–∫—É–Ω–ª–∞–¥–∏–Ω–≥–∏–∑. –†–∞—Ö–º–∞—Ç!")))
        return

    # ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await state.update_data(respondent_id=respondent.id)
    await get_next_question(bot, chat_id, state, respondent, respondent.history, next_question.id)


async def send_confirmation_text(bot, answer, open_answer=None):
    if not answer.telegram_chat_id:
        print(f"‚ùå –û—à–∏–±–∫–∞: telegram_chat_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è Answer ID={answer.id}")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    respondent = await sync_to_async(lambda: answer.respondent)()
    user = await sync_to_async(lambda: respondent.tg_user)()
    user_lang = user.lang if hasattr(user, 'lang') else 'uz_cyrl'
    
    # ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ + % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    total_questions = await sync_to_async(lambda: answer.respondent.poll.questions.count())()
    answered_count = await sync_to_async(
        lambda: Answer.objects.filter(respondent=answer.respondent, is_answered=True).count())()
    progress = int((answered_count / total_questions) * 100)
    
    # üßæ –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ (–æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ)
    question = await sync_to_async(lambda: answer.question)()
    question_text = await sync_to_async(question.get_text)(user_lang)
    
    if question.type in (
            Question.QuestionTypeChoices.CLOSED_MULTIPLE,
            Question.QuestionTypeChoices.MIXED_MULTIPLE
    ):
        selected_choices = await sync_to_async(list)(answer.selected_choices.all())
        selected_texts = []
        for choice in selected_choices:
            choice_text = await sync_to_async(choice.get_text)(user_lang)
            selected_texts.append(f"‚Ä¢ {choice_text}")
        selected_text = "\n".join(selected_texts)
    else:
        selected_choices = await sync_to_async(list)(answer.selected_choices.all())
        selected_text = ""
        if selected_choices:
            choice_text = await sync_to_async(selected_choices[0].get_text)(user_lang)
            selected_text += f"\n‚Ä¢ {choice_text}"

    if open_answer:
        selected_text += f"\n‚Ä¢ {open_answer}\n"

    def render_progress_bar(progress: int, total_blocks: int = 10) -> str:
        filled_blocks = int((progress / 100) * total_blocks)
        empty_blocks = total_blocks - filled_blocks
        return "‚ñà" * filled_blocks + "‚ñë" * empty_blocks

    progress_bar = render_progress_bar(progress)

    # –¢–µ–∫—Å—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    confirmation_labels = {
        'uz_cyrl': f"‚úÖ –°–∏–∑ —Ç–∞–Ω–ª–∞–≥–∞–Ω –∂–∞–≤–æ–±(–ª–∞—Ä):\n{selected_text}\n\n–ë–∏—Ç–∏—Ä–≥–∞–Ω–ª–∏–ª–∏–≥–∏:",
        'uz_latn': f"‚úÖ Siz tanlagan javob(lar):\n{selected_text}\n\nTamomlanganligi:",
        'ru': f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏:\n{selected_text}\n\n–ü—Ä–æ–≥—Ä–µ—Å—Å:"
    }
    
    confirmation_label = confirmation_labels.get(user_lang, confirmation_labels['uz_cyrl'])

    # üí¨ –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmation_text = (
        f"<b>{question_text}</b>\n\n"
        f"{confirmation_label} \n"
        f"{progress_bar} <b>{progress}%</b>"
    )

    await bot.send_message(
        chat_id=answer.telegram_chat_id,
        text=confirmation_text,
        parse_mode="HTML"
    )

    try:
        if answer.telegram_msg_id is not None:
            await bot.delete_message(chat_id=answer.telegram_chat_id, message_id=answer.telegram_msg_id)
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å poll: {e}")
