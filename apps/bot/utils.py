from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from asgiref.sync import sync_to_async
from django.db import IntegrityError
from django.utils import timezone
from django.utils.translation import gettext_lazy as _

from apps.bot.states import PollStates
from apps.polls.models import Poll, Respondent, Answer, Question
from apps.users.models import TGUser


async def async_get_or_create_user(defaults=None, **kwargs):
    """
    Async equivalent of Django's get_or_create.
    """
    defaults = defaults or {}
    try:
        # Try to get the object
        obj = await TGUser.objects.aget(**kwargs)
        created = False
    except TGUser.DoesNotExist:
        # Object does not exist, attempt to create it
        try:
            obj = await TGUser.objects.acreate(**{**kwargs, **defaults})
            created = True
        except IntegrityError:
            # Handle a race condition where the object was created between `aget` and `acreate`
            obj = await TGUser.objects.aget(**kwargs)
            created = False
    return obj, created


async def get_current_question(message: Message, state: FSMContext, user: TGUser):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã
    active_polls = Poll.objects.filter(deadline__gte=timezone.now())
    if not await active_polls.aexists():
        await message.answer(str(_("“≤–æ–∑–∏—Ä—á–∞ –∞–∫—Ç–∏–≤ —Å—û—Ä–æ–≤–Ω–æ–º–∞–ª–∞—Ä –º–∞–≤–∂—É–¥ —ç–º–∞—Å.")))
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –æ–ø—Ä–æ—Å
    respondent = await Respondent.objects.filter(tg_user=user, poll__in=active_polls, finished_at__isnull=True).afirst()
    if not respondent:
        # –ï—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ
        poll = await active_polls.afirst()  # –ü–æ–∫–∞ –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π
        respondent = await Respondent.objects.acreate(tg_user=user, poll=poll)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
    poll = await sync_to_async(lambda: respondent.poll)()
    questions = await sync_to_async(lambda: poll.questions.all())()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç—ã
    answered_question_ids = Answer.objects.filter(respondent=respondent).values_list('question_id', flat=True)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    next_question = await questions.exclude(id__in=answered_question_ids).afirst()

    if not next_question:
        # –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω
        respondent.finished_at = timezone.now()
        await respondent.asave()
        await message.answer(str(_("–°–∏–∑ —Å—û—Ä–æ–≤–Ω–æ–º–∞–Ω–∏ —Ç—û–ª–∏“õ —è–∫—É–Ω–ª–∞–¥–∏–Ω–≥–∏–∑. –†–∞—Ö–º–∞—Ç!")))
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ ID –≤–æ–ø—Ä–æ—Å–∞
    await state.update_data(respondent_id=respondent.id, question_id=next_question.id)

    await message.answer(str(_("–°–∞–≤–æ–ª: ")) + next_question.text)

    # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –≤—ã–≤–µ—Å—Ç–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–ø–æ–≤
    if next_question.type in [Question.QuestionTypeChoices.CLOSED_SINGLE, Question.QuestionTypeChoices.CLOSED_MULTIPLE]:
        buttons = []
        async for choice in next_question.choices.all():
            buttons.append(types.KeyboardButton(text=choice.text))

        markup = types.ReplyKeyboardMarkup(
            keyboard=[[button] for button in buttons],
            resize_keyboard=True
        )
        await message.answer(str(_("–ñ–∞–≤–æ–±–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá")), reply_markup=markup)
    await state.set_state(PollStates.waiting_for_answer)
