#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import os
import sys
import django

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/macbookpro/respondent-bot')

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.local')
django.setup()

from apps.polls.models import Poll, Question, Choice, Respondent
from apps.users.models import TGUser
from django.utils import timezone
import uuid

def create_test_data():
    print("üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("üë• –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    users_created = 0
    for i in range(1, 101):  # 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user, created = TGUser.objects.get_or_create(
            id=1000000 + i,  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            defaults={
                'username': f'test_user_{i}',
                'fullname': f'–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i}',
                'is_active': True
            }
        )
        if created:
            users_created += 1
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_created}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–ø—Ä–æ—Å
    print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞...")
    poll, created = Poll.objects.get_or_create(
        name="–î–µ–º–æ —Ç–µ—Å—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        defaults={
            'description': '–¢–µ—Å—Ç–æ–≤—ã–π –æ–ø—Ä–æ—Å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
            'uuid': uuid.uuid4(),
            'deadline': timezone.now() + timezone.timedelta(days=30)  # –î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π
        }
    )
    
    if created:
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –æ–ø—Ä–æ—Å: {poll.name}")
        
        # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–ø—Ä–æ—Å–∞
        question1, _ = Question.objects.get_or_create(
            poll=poll,
            text="–ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç?",
            type='closed_single',
            order=1
        )
        
        # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        colors = ['–ö—Ä–∞—Å–Ω—ã–π', '–°–∏–Ω–∏–π', '–ó–µ–ª–µ–Ω—ã–π', '–ñ–µ–ª—Ç—ã–π']
        for i, color in enumerate(colors):
            Choice.objects.get_or_create(
                question=question1,
                text=color,
                order=i + 1
            )
        
        question2, _ = Question.objects.get_or_create(
            poll=poll,
            text="–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?",
            type='open',
            order=2
        )
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {poll.questions.count()}")
    else:
        print(f"‚ÑπÔ∏è –û–ø—Ä–æ—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {poll.name}")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–∞—Ö (–¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–∞—Ö...")
    completed_count = 0
    for i in range(1, 31):  # 30 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø—Ä–æ—Å
        user = TGUser.objects.get(id=1000000 + i)
        respondent, created = Respondent.objects.get_or_create(
            poll=poll,
            tg_user=user,
            defaults={
                'finished_at': timezone.now(),
                'started_at': timezone.now() - timezone.timedelta(minutes=5)
            }
        )
        if created:
            completed_count += 1
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–∞—Ö: {completed_count}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {TGUser.objects.count()}")
    print(f"   üìä –í—Å–µ–≥–æ –æ–ø—Ä–æ—Å–æ–≤: {Poll.objects.count()}")
    print(f"   ‚úÖ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø—Ä–æ—Å: {Respondent.objects.filter(finished_at__isnull=False).count()}")
    print(f"   ‚è≥ –ù–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø—Ä–æ—Å: {TGUser.objects.count() - Respondent.objects.filter(finished_at__isnull=False).count()}")
    
    print("\nüéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print(f"üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É: python manage.py test_notifications --poll-id {poll.id}")

if __name__ == "__main__":
    create_test_data()
