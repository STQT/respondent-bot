#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import os
import sys
import django

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/macbookpro/respondent-bot')

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.local')
django.setup()

from apps.polls.models import NotificationCampaign, Poll, Respondent
from apps.users.models import TGUser
from django.utils import timezone

def test_notification_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –æ–ø—Ä–æ—Å
    try:
        poll = Poll.objects.first()
        if not poll:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤")
            return
        
        print(f"üìä –û–ø—Ä–æ—Å: {poll.name}")
        print(f"üîë UUID: {poll.uuid}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        campaign = NotificationCampaign.objects.create(
            topic=poll,
            total_users=0,
            status='pending'
        )
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞–º–ø–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {campaign.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å
        users_who_completed = Respondent.objects.filter(
            poll=poll,
            finished_at__isnull=False
        ).values_list('tg_user_id', flat=True).distinct()
        
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–µ –æ–ø—Ä–æ—Å: {len(users_who_completed)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = TGUser.objects.filter(is_active=True)
        users_to_notify = all_users.exclude(id__in=users_who_completed)
        
        print(f"üì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {users_to_notify.count()}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–∞–º–ø–∞–Ω–∏–∏
        campaign.total_users = users_to_notify.count()
        campaign.save()
        
        print(f"üìà –û–±–Ω–æ–≤–ª–µ–Ω–æ total_users: {campaign.total_users}")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 100
        user_ids = list(users_to_notify.values_list('id', flat=True))
        chunk_size = 100
        user_chunks = [user_ids[i:i + chunk_size] for i in range(0, len(user_ids), chunk_size)]
        
        print(f"üì¶ –°–æ–∑–¥–∞–Ω–æ –≥—Ä—É–ø–ø: {len(user_chunks)}")
        for i, chunk in enumerate(user_chunks):
            print(f"   –ì—Ä—É–ø–ø–∞ {i}: {len(chunk)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if users_to_notify.exists():
            print("\nüë§ –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
            for user in users_to_notify[:5]:
                print(f"   - {user.fullname} (ID: {user.id}, Username: {user.username or '–ù–µ—Ç'})")
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é
        campaign.delete()
        print(f"\nüßπ –¢–µ—Å—Ç–æ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞")
        
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_notification_logic()
